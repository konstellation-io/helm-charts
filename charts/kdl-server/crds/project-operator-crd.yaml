apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: kdlprojects.kdl.konstellation.io
spec:
  group: kdl.konstellation.io
  names:
    kind: KDLProject
    listKind: KDLProjectList
    plural: kdlprojects
    singular: kdlproject
    shortNames:
      - kdlproject
  scope: Namespaced
  versions:
  - name: v1
    served: true
    storage: true
    additionalPrinterColumns:
    - jsonPath: .spec.projectId
      name: Project
      type: string
    - jsonPath: .spec.domain
      name: Domain
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    schema:
      openAPIV3Schema:
        description: |
          KDLProject is the Schema for the KDLProjects API. It defines a complete ML project
          environment including MLflow tracking, file management, and related services.
        type: object
        required:
          - spec
        properties:
          apiVersion:
            description: |
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
            type: string
          kind:
            description: |
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated. In CamelCase.
            type: string
          metadata:
            type: object
          spec:
            description: |
              Spec defines the desired state of KDLProject. It includes all configuration
              options for the project's components including Filebrowser, MLflow, and shared
              resources.
            type: object
            required:
              - projectId
              - domain
            x-kubernetes-preserve-unknown-fields: true
            properties:
              nameOverride:
                description: |
                  String to partially override kdl-project.fullname template while maintaining
                  the release name. This allows for customization of resource names while
                  preserving the release identity.
                type: string
              fullnameOverride:
                description: |
                  String to fully override kdl-project.fullname template. This provides
                  complete control over the resource naming, replacing the default naming
                  convention entirely.
                type: string
              inputData:
                type: object
                description: "Optional key-value pairs for storing arbitrary data"
                additionalProperties: {}
                nullable: true
              projectId:
                description: |
                  Unique identifier for the KDL project. This ID is used across all
                  components and resources to ensure proper resource association and
                  isolation between different projects.
                type: string
                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                minLength: 1
                maxLength: 63
              domain:
                description: |
                  Domain name where the project will be deployed. This domain is used
                  for configuring ingress rules and external access to project services.
                  It should be a valid domain name that your cluster can handle.
                type: string
                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
              # Filebrowser Configuration
              filebrowser:
                description: |
                  Filebrowser service configuration defines all aspects of the file management
                  component of KDL. Filebrowser provides a web interface for file operations,
                  making it easier to manage datasets and other project files.

                  This service is essential for data scientists to interact with their
                  project files through a user-friendly interface, supporting features like
                  file upload, download, and organization.
                type: object
                properties:
                  enabled:
                    description: |
                      Controls whether the Filebrowser service should be deployed.
                      When disabled, all associated resources will not be created,
                      though existing data will be preserved if using persistent storage.
                    type: boolean
                  replicaCount:
                    description: |
                      Number of replicas of the Filebrowser service to deploy.
                      For high availability, consider using more than one replica.
                      Note that when using persistent storage, proper storage class
                      support for ReadWriteMany access mode might be required for
                      multiple replicas.
                    type: integer
                    minimum: 0
                  image:
                    description: |
                      Container image configuration for the Filebrowser service.
                      This defines which version of Filebrowser to deploy and how
                      to pull the image.
                    type: object
                    required:
                      - repository
                      - tag
                    properties:
                      repository:
                        description: |
                          Docker image repository for Filebrowser.
                          Example: filebrowser/filebrowser
                        type: string
                      tag:
                        description: |
                          Docker image tag to use. It's recommended to use specific
                          versions rather than 'latest' for production deployments.
                        type: string
                      pullPolicy:
                        description: |
                          Image pull policy determines when Kubernetes should attempt
                          to pull the container image.
                          - Always: Always pull the image
                          - IfNotPresent: Only pull if not present
                          - Never: Never pull the image (must exist locally)
                        type: string
                        enum: [Always, Never, IfNotPresent]
                  imagePullSecrets:
                    description: |
                      List of secrets containing credentials for pulling images
                      from private registries. Each secret should be created in
                      the same namespace and referenced here by name.
                    type: array
                    items:
                      type: object
                      required:
                        - name
                      properties:
                        name:
                          description: "Name of the secret containing registry credentials"
                          type: string
                  serviceAccount:
                    description: |
                      ServiceAccount configuration for the Filebrowser service.
                      ServiceAccounts are used to provide an identity for the Filebrowser
                      pods and control their permissions through RBAC rules.
                    type: object
                    properties:
                      create:
                        description: |
                          Whether to create a dedicated ServiceAccount for Filebrowser.
                          If false, the default ServiceAccount will be used unless a
                          name is specified.
                        type: boolean
                      automount:
                        description: |
                          Controls whether the ServiceAccount token should be automatically
                          mounted into the pod. For security, disable this if the service
                          doesn't need to interact with the Kubernetes API.
                        type: boolean
                      annotations:
                        description: |
                          Annotations to add to the ServiceAccount. This is useful for
                          integration with cloud providers or other services that rely
                          on ServiceAccount annotations.
                        type: object
                        additionalProperties:
                          type: string
                      name:
                        description: |
                          Name of the ServiceAccount to use. If not set and create is
                          true, a name is generated using the fullname template. If set
                          and create is false, references an existing ServiceAccount.
                        type: string
                  service:
                    description: |
                      Kubernetes Service configuration for exposing the Filebrowser
                      pods within or outside the cluster.
                    type: object
                    required:
                      - type
                      - port
                    properties:
                      type:
                        description: |
                          Type of Kubernetes Service to create:
                          - ClusterIP: Exposed within the cluster only
                          - NodePort: Exposed on each node's IP at a static port
                          - LoadBalancer: Exposed externally using cloud provider's load balancer
                        type: string
                        enum: [ClusterIP, NodePort, LoadBalancer]
                      port:
                        description: |
                          Port number that the service will listen on and forward to
                          the target pods.
                        type: integer
                        minimum: 1
                        maximum: 65535
                      targetPort:
                        description: |
                          Port number that the Filebrowser application is listening on
                          inside the container. If not specified, defaults to the service port.
                        type: integer
                        minimum: 1
                        maximum: 65535
                      nodePort:
                        description: |
                          When type is NodePort, specifies the port to expose on each node.
                          If not specified, Kubernetes will allocate a port automatically.
                        type: integer
                        minimum: 30000
                        maximum: 32767
                      extraPorts:
                        description: |
                          Additional ports to expose through the service, useful for metrics,
                          monitoring, or additional protocols.
                        type: array
                        items:
                          type: object
                          required:
                            - name
                            - port
                          properties:
                            name:
                              description: "Name of the additional port"
                              type: string
                            port:
                              description: "Service port number"
                              type: integer
                              minimum: 1
                              maximum: 65535
                            targetPort:
                              description: "Container port number"
                              type: integer
                              minimum: 1
                              maximum: 65535
                  # Security Settings
                  securityContext:
                    description: |
                      Container-level security context for Filebrowser defines the privileges
                      and access control settings for the Filebrowser container. These settings
                      are crucial for maintaining a secure deployment that follows the
                      principle of least privilege.
                    type: object
                    additionalProperties: true
                    properties:
                      privileged:
                        description: |
                          Controls whether the container runs in privileged mode.
                          Running containers in privileged mode gives them almost the same
                          access as processes running on the host. This should be avoided
                          unless absolutely necessary for security reasons.
                        type: boolean
                      runAsUser:
                        description: |
                          The UID to run the Filebrowser process as. Using a non-root user
                          is recommended for security. The UID must have necessary
                          permissions to access required resources.
                        type: integer
                      runAsGroup:
                        description: |
                          The GID to run the Filebrowser process as. This should be set
                          in conjunction with runAsUser to ensure proper file
                          permissions.
                        type: integer
                      fsGroup:
                        description: |
                          The GID that will own any mounted volumes. This ensures
                          Filebrowser can read/write to persistent storage with proper
                          permissions.
                        type: integer
                      runAsNonRoot:
                        description: |
                          Forces the container to run as a non-root user. This is a
                          security best practice to prevent potential privilege
                          escalation.
                        type: boolean
                      readOnlyRootFilesystem:
                        description: |
                          Mounts the container's root filesystem as read-only.
                          This prevents modifications to the container's filesystem
                          at runtime, improving security.
                        type: boolean
                      capabilities:
                        description: |
                          Linux capabilities to add or drop for the container.
                          Following the principle of least privilege, drop all
                          capabilities and add only those specifically required.
                        type: object
                        properties:
                          add:
                            type: array
                            items:
                              type: string
                          drop:
                            type: array
                            items:
                              type: string
                  podAnnotations:
                    description: |
                      Pod annotations provide a flexible mechanism for attaching non-identifying metadata
                      to pods in the development environment. Unlike labels, annotations can store
                      arbitrary metadata that enriches pods with additional information and can influence
                      system behavior.

                      Annotations serve multiple crucial purposes in a Kubernetes environment:
                      - They can trigger specific behaviors in other systems and tools
                      - They store build and release information
                      - They configure monitoring and logging systems
                      - They maintain deployment history and tracking
                      - They enable integration with external tools and services

                      In the context of development environments, annotations can be used to:
                      - Store information about the environment's configuration
                      - Track deployment timestamps and versions
                      - Configure service mesh behaviors
                      - Enable specific monitoring patterns
                      - Store documentation links and references
                      - Maintain audit and compliance information

                      Common annotation patterns include:
                      - kubernetes.io/change-cause: Records the reason for the latest update
                      - prometheus.io/scrape: Configures metric collection
                      - sidecar.istio.io/inject: Controls service mesh injection
                      - environment.tools/last-updated: Tracks configuration updates
                      - docs.tools/environment-guide: Links to relevant documentation

                      When using annotations, consider:
                      - They are not used for object selection (use labels instead)
                      - They can store larger data chunks than labels
                      - They can include non-alphanumeric characters
                      - They support structured data in their values
                      - They can be automatically modified by system components
                    type: object
                    additionalProperties:
                      type: string
                  podLabels:
                    description: |
                      Custom labels that will be added to the pods in the development
                      environment. These labels serve multiple important purposes in
                      the Kubernetes ecosystem and are crucial for pod identification
                      and management.

                      Pod labels enable:
                      - Runtime identification and tracking
                      - Capability management
                      - Service discovery
                      - Resource grouping
                      - Policy application
                      - Monitoring and metrics

                      In the KDL context, labels are particularly important for:
                      - Associating pods with specific runtimes
                      - Tracking capability versions
                      - Enabling selective service routing
                      - Supporting audit requirements
                      - Facilitating resource management

                      Example labels include:
                      - runtimeId: Identifies the specific runtime version
                      - capabilityId: Tracks enabled capabilities
                      - environmentType: Distinguishes development environments
                      - userTier: Indicates resource tier allocation
                    type: object
                    additionalProperties:
                      type: string
                  podSecurityContext:
                    description: |
                      Pod-level security context defines security settings that apply
                      to all containers in the Filebrowser pod. These settings establish
                      the base security posture for the Filebrowser deployment.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  initContainers:
                    description: |
                      Configuration for initialization containers that run before the
                      main MLflow container starts. Init containers are crucial for
                      proper setup and validation of the environment before MLflow
                      begins operation.

                      Common uses include:
                      - Database schema initialization
                      - Secret distribution
                      - Permission setup
                      - Resource validation
                      - Service dependency checks
                    type: array
                    items:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                  extraContainers:
                    description: |
                      Additional containers to run alongside the main MLflow container
                      in the same pod. These sidecar containers can provide supporting
                      functionality without modifying the main MLflow container.

                      Typical use cases include:
                      - Logging aggregation
                      - Monitoring agents
                      - Service mesh proxies
                      - Security scanners
                      - Data synchronization
                    type: array
                    items:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                  networkPolicy:
                    description: |
                      Network Policy configuration for the Filebrowser service. NetworkPolicies
                      provide a way to control traffic flow at the IP address or port level.
                      They are essential for implementing the principle of least privilege
                      in network communication.

                      These policies can restrict both ingress (incoming) and egress
                      (outgoing) traffic, helping to secure the Filebrowser service by
                      defining exactly which components can communicate with it.
                    type: object
                    properties:
                      enabled:
                        description: |
                          Controls whether NetworkPolicies should be created for Filebrowser.
                          When enabled, the specified ingress and egress rules will be
                          applied to control traffic flow.
                        type: boolean
                      policyTypes:
                        description: |
                          Specifies which types of policies should be enforced:
                          - Ingress: Controls incoming traffic
                          - Egress: Controls outgoing traffic
                          You can specify either or both types depending on your security
                          requirements.
                        type: array
                        items:
                          type: string
                          enum: [Ingress, Egress]
                      ingress:
                        description: |
                          List of ingress rules specifying allowed incoming traffic.
                          Each rule can specify allowed sources based on pod selectors,
                          namespace selectors, or IP blocks, along with specific ports
                          and protocols.
                        type: array
                        items:
                          x-kubernetes-preserve-unknown-fields: true
                      egress:
                        description: |
                          List of egress rules specifying allowed outgoing traffic.
                          Each rule can specify allowed destinations based on pod selectors,
                          namespace selectors, or IP blocks, along with specific ports
                          and protocols.
                        type: array
                        items:
                          x-kubernetes-preserve-unknown-fields: true
                  # Health Check Configurations
                  livenessProbe:
                    description: |
                      Liveness probe configuration determines if the Filebrowser container
                      is operating correctly. Failed liveness probes result in container
                      restart, helping maintain service health through automatic recovery.
                      Configure this probe considering:
                      - Startup time requirements
                      - Recovery time objectives
                      - Application health indicators
                    type: object
                    properties:
                      enabled:
                        description: "Whether this probe is enabled"
                        type: boolean
                      failureThreshold:
                        description: |
                          Number of times the probe must fail before giving up and
                          marking the container as unhealthy.
                        type: integer
                        minimum: 1
                      initialDelaySeconds:
                        description: |
                          Number of seconds to wait before performing the first probe.
                        type: integer
                        minimum: 0
                      periodSeconds:
                        description: "How often to perform the probe."
                        type: integer
                        minimum: 1
                      successThreshold:
                        description: |
                          Minimum consecutive successes required to consider the probe
                          successful.
                        type: integer
                        minimum: 1
                      timeoutSeconds:
                        description: "Number of seconds before probe times out."
                        type: integer
                        minimum: 1
                  livenessProbeCustom:
                    description: |
                      Liveness probe configuration determines if a container is operating
                      properly and should continue running. This probe helps maintain
                      service health by automatically restarting unhealthy containers.

                      Liveness probes are crucial for:
                      - Detecting application deadlocks
                      - Identifying hung processes
                      - Managing memory leaks
                      - Handling unrecoverable errors
                      - Maintaining service reliability

                      The probe should check:
                      - Basic application health
                      - Critical service functions
                      - Resource availability
                      - System stability
                      - Core dependencies
                    type: object
                    properties:
                      httpGet:
                        description: |
                          HTTP GET request configuration for liveness checking. Should
                          verify basic service health without heavy processing.

                          The endpoint should:
                          - Respond quickly
                          - Check critical functions
                          - Avoid external dependencies
                          - Minimize resource usage
                          - Provide clear health status
                        type: object
                        properties:
                          path:
                            description: |
                              URL path for the liveness check. Should be a lightweight
                              endpoint that confirms basic service health.
                            type: string
                          port:
                            description: |
                              Port number where the liveness check endpoint is exposed.
                              Should be consistently available.
                            type: integer
                      failureThreshold:
                        description: |
                          Number of times the probe can fail before triggering a container
                          restart. Balance between reliability and stability.
                        type: integer
                      initialDelaySeconds:
                        description: |
                          Time to wait after container startup before beginning liveness
                          checks. Must exceed normal startup time.
                        type: integer
                      periodSeconds:
                        description: |
                          Interval between probe attempts. More frequent checks provide
                          faster detection of issues.
                        type: integer
                      successThreshold:
                        description: |
                          Number of consecutive successes required after failure to
                          consider the container healthy again.
                        type: integer
                      timeoutSeconds:
                        description: |
                          Maximum time allowed for a probe attempt. Should be short
                          enough to detect hanging processes.
                        type: integer
                  readinessProbe:
                    description: |
                      Readiness probe configuration determines if the Filebrowser container
                      is ready to handle requests. Failed readiness probes remove the
                      pod from service endpoints until it recovers.
                      Important considerations:
                      - Database connectivity
                      - Required service dependencies
                      - Resource availability
                      - Initialization completion
                    type: object
                    properties:
                      enabled:
                        description: "Whether this probe is enabled."
                        type: boolean
                      failureThreshold:
                        description: |
                          Number of times the probe must fail before giving up and
                          marking the container as not ready.
                        type: integer
                        minimum: 1
                      initialDelaySeconds:
                        description: |
                          Number of seconds to wait before performing the first probe.
                        type: integer
                        minimum: 0
                      periodSeconds:
                        description: "How often to perform the probe."
                        type: integer
                        minimum: 1
                      successThreshold:
                        description: |
                          Minimum consecutive successes required to consider the probe
                          successful.
                        type: integer
                        minimum: 1
                      timeoutSeconds:
                        description: "Number of seconds before probe times out."
                        type: integer
                        minimum: 1
                  readinessProbeCustom:
                    description: |
                      Readiness probe configuration determines when a container is ready
                      to accept traffic. This probe is crucial for ensuring that only
                      fully functional instances receive requests.

                      Readiness probes are essential for:
                      - Service availability management
                      - Load balancer configuration
                      - Traffic routing control
                      - Deployment orchestration
                      - Service mesh integration

                      The probe should verify:
                      - Required services are available
                      - Dependencies are accessible
                      - Database connections are established
                      - Cache is warmed up
                      - System resources are ready
                    type: object
                    properties:
                      httpGet:
                        description: |
                          HTTP GET request configuration for service readiness checking.
                          Should verify that the service is fully operational.

                          The endpoint should validate:
                          - Application readiness
                          - Database connectivity
                          - Cache availability
                          - External service access
                          - Required resources
                        type: object
                        properties:
                          path:
                            description: |
                              URL path that indicates service readiness. Should return
                              success only when the service is fully operational.
                            type: string
                          port:
                            description: |
                              Port number for the readiness check. Must be accessible
                              within the cluster.
                            type: integer
                      failureThreshold:
                        description: |
                          Number of consecutive probe failures before marking the container
                          as not ready. Affects service availability during issues.
                        type: integer
                      initialDelaySeconds:
                        description: |
                          Time to wait before starting readiness checks. Should account
                          for normal service initialization time.
                        type: integer
                      periodSeconds:
                        description: |
                          Frequency of readiness checks. Balance between responsiveness
                          and system load.
                        type: integer
                      successThreshold:
                        description: |
                          Number of consecutive successes required after failure before
                          marking container as ready.
                        type: integer
                      timeoutSeconds:
                        description: |
                          Timeout for readiness probe attempts. Should be less than
                          periodSeconds.
                        type: integer
                  startupProbe:
                    description: |
                      Startup probe configuration helps handle slow-starting containers.
                      This probe gives the container additional time to initialize before
                      the liveness and readiness probes begin checking.
                      This is particularly useful for containers that require significant
                      initialization time, preventing premature restarts by the liveness
                      probe during startup.
                    type: object
                    properties:
                      enabled:
                        description: "Whether this probe is enabled."
                        type: boolean
                      failureThreshold:
                        description: |
                          Number of times the probe must fail before giving up and
                          marking the container as not started.
                        type: integer
                        minimum: 1
                      initialDelaySeconds:
                        description: |
                          Number of seconds to wait before performing the first probe.
                        type: integer
                        minimum: 0
                      periodSeconds:
                        description: "How often to perform the probe."
                        type: integer
                        minimum: 1
                      successThreshold:
                        description: |
                          Minimum consecutive successes required to consider the probe
                          successful.
                        type: integer
                        minimum: 1
                      timeoutSeconds:
                        description: "Number of seconds before probe times out."
                        type: integer
                        minimum: 1
                  startupProbeCustom:
                    description: |
                      Startup probe configuration helps handle slow-starting containers by
                      providing additional time for initialization before other probes begin.
                      This is particularly important for development environments that may
                      require significant setup time for tools and dependencies.

                      A startup probe serves several critical purposes:
                      - Prevents premature container restarts during initialization
                      - Accommodates varying startup times across different environments
                      - Ensures proper tool and dependency initialization
                      - Provides time for runtime compilation and cache warming
                      - Maintains service stability during startup phases

                      The probe can be configured to check different aspects of readiness:
                      - HTTP endpoints for web-based services
                      - TCP ports for network services
                      - Command execution for system checks
                      - File system markers for initialization completion
                      - Service-specific health indicators
                    type: object
                    properties:
                      httpGet:
                        description: |
                          HTTP GET request configuration for health checking. This method
                          is commonly used for web-based services and APIs.

                          The HTTP check validates:
                          - Service availability
                          - Basic functionality
                          - Network accessibility
                          - Authentication readiness
                          - Required dependencies
                        type: object
                        properties:
                          path:
                            description: |
                              URL path to check for service health. Should be an endpoint
                              that accurately reflects service readiness.
                            type: string
                          port:
                            description: |
                              Port number where the health check endpoint is exposed.
                              Must match the service's configured port.
                            type: integer
                      failureThreshold:
                        description: |
                          Number of times the probe can fail before giving up. Higher
                          values provide more tolerance for temporary issues during startup.
                        type: integer
                      initialDelaySeconds:
                        description: |
                          Time to wait after container startup before beginning probe
                          checks. Should account for typical initialization time.
                        type: integer
                      periodSeconds:
                        description: |
                          Interval between probe attempts. Balance between quick detection
                          and resource usage.
                        type: integer
                      successThreshold:
                        description: |
                          Minimum consecutive successes required to consider the probe
                          successful after failure.
                        type: integer
                      timeoutSeconds:
                        description: |
                          Maximum time allowed for a probe attempt before considering
                          it failed.
                        type: integer
                  # Environment and Secrets Management
                  env:
                    description: |
                      Environment variables configuration for Filebrowser defines the runtime
                      configuration of the service. These variables control Filebrowser's
                      behavior, integration with other services, and operational parameters.

                      Environment variables are crucial for configuring:
                      - Backend store settings
                      - Artifact store locations
                      - Authentication parameters
                      - Logging configuration
                      - Service endpoints
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                    example:
                      FB_ADDRESS: "0.0.0.0"
                      FB_DATABASE: /database.db
                      FB_LOG: stdout
                      FB_PORT: "9696"
                      FB_ROOT: /srv
                  envFromSecrets:
                    description: |
                      Configuration for environment variables that should be populated
                      from Kubernetes Secrets. This is the recommended way to handle
                      sensitive configuration data such as:

                      - Database credentials
                      - API keys
                      - Access tokens
                      - Encryption keys
                      - Authentication credentials

                      Each key in this object represents an environment variable, and
                      the value specifies which Secret and key to use.
                    type: object
                    additionalProperties:
                      type: object
                      required:
                        - name
                        - key
                      properties:
                        name:
                          description: |
                            Name of the Kubernetes Secret containing the desired value.
                            The Secret must exist in the same namespace as Filebrowser.
                          type: string
                        key:
                          description: |
                            Key within the Secret that contains the value to use.
                            This value will be mounted as an environment variable.
                          type: string
                  envFromConfigMap:
                    description: |
                      Configuration for environment variables that should be populated
                      from ConfigMaps. This is ideal for non-sensitive configuration
                      data that might need to be updated independently of the
                      deployment.

                      Common uses include:
                      - Feature flags
                      - Logging configurations
                      - Service endpoints
                      - Runtime parameters
                    type: object
                    additionalProperties:
                      type: object
                      required:
                        - name
                        - key
                      properties:
                        name:
                          description: |
                            Name of the ConfigMap containing the desired value.
                            The ConfigMap must exist in the same namespace as Filebrowser.
                          type: string
                        key:
                          description: |
                            Key within the ConfigMap that contains the value to use.
                            This value will be mounted as an environment variable.
                          type: string
                  envFromFiles:
                    description: |
                      List of Secrets or ConfigMaps to mount as environment variables.
                      This allows bulk import of configuration values from files,
                      useful when you have many related configuration items or
                      complex configurations.

                      This approach is particularly useful for:
                      - Large configuration sets
                      - Dynamic configurations
                      - Shared configurations across containers
                    type: array
                    items:
                      type: object
                      properties:
                        secretRef:
                          description: |
                            Reference to a Secret to mount as environment variables.
                            All keys in the Secret will become environment variables.
                          type: object
                          properties:
                            name:
                              description: "Name of the Secret to mount"
                              type: string
                        configMapRef:
                          description: |
                            Reference to a ConfigMap to mount as environment variables.
                            All keys in the ConfigMap will become environment variables.
                          type: object
                          properties:
                            name:
                              description: "Name of the ConfigMap to mount"
                              type: string
                  # Volume Configuration
                  volumes:
                    description: |
                      Additional volumes to mount in the Filebrowser pods. These volumes can
                      be used for various purposes beyond the main persistent storage,
                      such as:

                      - Configuration files
                      - Temporary storage
                      - Shared data
                      - Certificates and secrets
                      - Custom scripts or plugins
                    type: array
                    items:
                      description: |
                        Volume definition following the Kubernetes volume specification.
                        Supports all standard Kubernetes volume types including:

                        - configMap
                        - secret
                        - emptyDir
                        - hostPath
                        - persistentVolumeClaim
                      x-kubernetes-preserve-unknown-fields: true
                  volumeMounts:
                    description: |
                      Configuration for mounting additional volumes into the Filebrowser
                      container. This specifies exactly where and how volumes should
                      be mounted in the container filesystem.

                      Proper volume mounting is crucial for:
                      - Data persistence
                      - Configuration management
                      - Secret handling
                      - Temporary storage
                    type: array
                    items:
                      type: object
                      required:
                        - name
                        - mountPath
                      properties:
                        name:
                          description: |
                            Name of the volume to mount. Must correspond to a volume
                            defined in the volumes array.
                          type: string
                        mountPath:
                          description: |
                            Path in the container filesystem where the volume should
                            be mounted. Choose paths that don't conflict with the
                            Filebrowser application paths.
                          type: string
                        subPath:
                          description: |
                            Optional path within the volume to mount. Useful when you
                            want to mount only a specific directory or file from the
                            volume instead of the entire volume.
                          type: string
                        readOnly:
                          description: |
                            Whether the volume should be mounted read-only. Enable
                            this for security when the container doesn't need to
                            write to the volume.
                          type: boolean
                  # Container Lifecycle Configuration
                  lifecycle:
                    description: |
                      Container lifecycle hooks allow you to execute commands or make
                      HTTP requests at specific points in a container's lifecycle.
                      This enables proper initialization and graceful shutdown procedures.
                    type: object
                    properties:
                      preStop:
                        description: |
                          Commands or HTTP requests to execute before stopping the container.
                          This enables graceful shutdown procedures, ensuring all requests
                          are properly handled before termination.
                        x-kubernetes-preserve-unknown-fields: true
                      postStart:
                        description: |
                          Commands or HTTP requests to execute after the container starts.
                          This can be used for additional setup or verification steps
                          after container initialization.
                        x-kubernetes-preserve-unknown-fields: true
                  terminationGracePeriodSeconds:
                    description: |
                      Duration in seconds Kubernetes should wait for the container to
                      terminate gracefully. During this time, the container can perform
                      cleanup operations before being forcefully terminated.
                    type: integer
                    minimum: 0
                  # Resource Management
                  resources:
                    description: |
                      Resource requirements and limits for the Filebrowser container.
                      Proper resource configuration is crucial for optimal performance
                      and efficient cluster resource utilization.
                    type: object
                    properties:
                      limits:
                        description: |
                          Maximum amount of compute resources allowed for the container.
                          Exceeding these limits may cause the container to be throttled
                          or terminated.
                        type: object
                        properties:
                          cpu:
                            description: |
                              CPU limit in cores or millicores (e.g., "500m" for 500 millicores
                              or "1" for 1 core). Setting appropriate CPU limits helps
                              prevent a single container from consuming excessive CPU
                              resources.
                            type: string
                            pattern: '^([0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$'
                          memory:
                            description: |
                              Memory limit in bytes or with SI suffixes (e.g., "512Mi" or "2Gi").
                              This setting prevents memory leaks from impacting other
                              containers on the same node.
                            type: string
                            pattern: '^([0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$'
                      requests:
                        description: |
                          Minimum amount of compute resources required for the container.
                          The scheduler uses these values to decide which node to place
                          the pod on.
                        type: object
                        properties:
                          cpu:
                            description: |
                              Requested CPU resources. The scheduler will ensure this
                              amount of CPU is available on the selected node. Setting
                              this appropriately helps ensure the container has sufficient
                              CPU resources to operate efficiently.
                            type: string
                            pattern: '^([0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$'
                          memory:
                            description: |
                              Requested memory resources. The scheduler will ensure this
                              amount of memory is available on the selected node. This
                              should be set based on the application's typical memory
                              usage patterns.
                            type: string
                            pattern: '^([0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$'
                  # Advanced Scheduling
                  podDisruptionBudget:
                    description: |
                      PodDisruptionBudget limits the number of Filebrowser pods that can be
                      down simultaneously due to voluntary disruptions. This helps maintain
                      service availability during cluster maintenance or scaling operations.
                    type: object
                    properties:
                      enabled:
                        description: "Enable or disable PodDisruptionBudget"
                        type: boolean
                      maxUnavailable:
                        description: |
                          Maximum number of pods that can be unavailable simultaneously.
                          Can be specified as an absolute number or a percentage.
                        x-kubernetes-int-or-string: true
                      minAvailable:
                        description: |
                          Minimum number of pods that must be available simultaneously.
                          Can be specified as an absolute number or a percentage.
                        x-kubernetes-int-or-string: true
                  autoscaling:
                    description: |
                      Horizontal Pod Autoscaling configuration for Filebrowser. This allows
                      automatic scaling of the number of pods based on observed metrics
                      like CPU or memory utilization.
                    type: object
                    properties:
                      enabled:
                        description: "Enable or disable autoscaling"
                        type: boolean
                      minReplicas:
                        description: "Minimum number of replicas to scale down to"
                        type: integer
                        minimum: 1
                      maxReplicas:
                        description: "Maximum number of replicas to scale up to"
                        type: integer
                        minimum: 1
                      targetCPUUtilizationPercentage:
                        description: |
                          Target CPU utilization percentage. The autoscaler will try to
                          maintain this level of CPU utilization across all pods.
                        type: integer
                        minimum: 1
                        maximum: 100
                      targetMemoryUtilizationPercentage:
                        description: |
                          Target memory utilization percentage. The autoscaler will try to
                          maintain this level of memory utilization across all pods.
                        type: integer
                        minimum: 1
                        maximum: 100
                  # Pod Placement Configuration
                  nodeSelector:
                    description: |
                      Node selector constraints for pod assignment. This allows you to
                      specify which nodes the Filebrowser pods can run on based on node
                      labels.
                    type: object
                    additionalProperties:
                      type: string
                  tolerations:
                    description: |
                      Tolerations allow pods to be scheduled on nodes with matching taints.
                      This is useful for dedicating specific nodes to certain workloads
                      or ensuring pods run on nodes with special hardware.
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          description: "The taint key that the toleration applies to"
                          type: string
                        operator:
                          description: "The operator represents the relationship to the value"
                          type: string
                          enum: [Exists, Equal]
                        value:
                          description: "The taint value the toleration matches to"
                          type: string
                        effect:
                          description: "The taint effect to match"
                          type: string
                          enum: [NoSchedule, PreferNoSchedule, NoExecute]
                        tolerationSeconds:
                          description: |
                            Duration in seconds the pod tolerates the taint before being
                            evicted. Only applies to NoExecute effect.
                          type: integer
                  affinity:
                    description: |
                      Pod affinity and anti-affinity rules for fine-grained control over
                      pod placement. These rules can ensure pods are co-located with or
                      separated from other pods based on topology constraints.
                    x-kubernetes-preserve-unknown-fields: true
                  topologySpreadConstraints:
                    description: |
                      Topology spread constraints control how pods are spread across your
                      cluster among failure-domains such as regions, zones, nodes, or other
                      user-defined topology domains.
                    type: array
                    items:
                      type: object
                      required:
                        - maxSkew
                        - topologyKey
                        - whenUnsatisfiable
                      properties:
                        maxSkew:
                          description: |
                            Maximum difference between the number of pods in any two
                            topology domains of a given topology type.
                          type: integer
                          minimum: 1
                        topologyKey:
                          description: |
                            The key of node labels representing the topology domain.
                            Common topology keys are "kubernetes.io/hostname" for node-level
                            and "topology.kubernetes.io/zone" for zone-level spreading.
                          type: string
                        whenUnsatisfiable:
                          description: |
                            How to handle a pod if it doesn't satisfy the spread constraint:
                            - DoNotSchedule: don't schedule the pod (enforced spreading)
                            - ScheduleAnyway: schedule the pod anyway (preferred spreading)
                          type: string
                          enum: [DoNotSchedule, ScheduleAnyway]
                        labelSelector:
                          description: |
                            Label selector to find pods that are subject to this rule.
                            It allows you to specify which pods should be counted for
                            spreading.
                          x-kubernetes-preserve-unknown-fields: true
              # MLflow Configuration
              mlflow:
                description: |
                  MLflow service configuration defines all aspects of the machine learning
                  experiment tracking and model management platform. MLflow enables data
                  scientists to track experiments, package code into reproducible runs,
                  and share and deploy models.

                  The service provides essential functionality for the ML lifecycle,
                  including parameter tracking, metric logging, artifact storage, and
                  model versioning. This comprehensive setup ensures reproducibility
                  and collaboration in machine learning projects.
                type: object
                properties:
                  enabled:
                    description: |
                      Controls whether the MLflow service should be deployed. When enabled,
                      the service provides a centralized platform for experiment tracking
                      and model management. When disabled, all associated resources will
                      not be created, though existing data persists if using persistent
                      storage.

                      Consider keeping this enabled if you need to:
                      - Track machine learning experiments
                      - Store and version models
                      - Compare different model versions
                      - Share results with team members
                    type: boolean
                  replicaCount:
                    description: |
                      Number of MLflow server replicas to deploy. Multiple replicas
                      provide high availability and load balancing capabilities.

                      When setting this value, consider:
                      - Expected load from concurrent users
                      - High availability requirements
                      - Resource availability in your cluster
                      - Storage backend capabilities (must support concurrent access)
                    type: integer
                    minimum: 0
                  image:
                    description: |
                      Container image configuration for the MLflow service. This defines
                      the specific version of MLflow to deploy and how to obtain the image.

                      The image should be compatible with your ML workflow requirements
                      and include any additional dependencies needed for your specific
                      use case.
                    type: object
                    required:
                      - repository
                      - tag
                    properties:
                      repository:
                        description: |
                          Docker image repository for MLflow. This can be either the
                          official MLflow image or a custom image with additional
                          dependencies and configurations.

                          Example: konstellation/kdl-mlflow
                        type: string
                      tag:
                        description: |
                          Docker image tag specifying the version of MLflow to use.
                          Using specific version tags rather than 'latest' is recommended
                          for production deployments to ensure consistency and
                          reproducibility.
                        type: string
                      pullPolicy:
                        description: |
                          Image pull policy determines when Kubernetes should pull the
                          MLflow container image:

                          - Always: Pull the image every time the pod starts
                          - IfNotPresent: Use cached image if available
                          - Never: Assume the image exists locally

                          For production, 'IfNotPresent' is recommended for stability
                          and performance.
                        type: string
                        enum: [Always, Never, IfNotPresent]
                  serviceAccount:
                    description: |
                      ServiceAccount configuration for MLflow defines the Kubernetes
                      identity used by the MLflow pods. This identity controls what
                      actions the MLflow service can perform within the cluster.

                      Proper configuration ensures the service has necessary permissions
                      while adhering to the principle of least privilege.
                    type: object
                    properties:
                      create:
                        description: |
                          When true, a dedicated ServiceAccount will be created for
                          MLflow. This is recommended for better security isolation
                          and more granular permission control.
                        type: boolean
                      automount:
                        description: |
                          Controls automatic mounting of the Kubernetes API credentials.
                          Enable this if MLflow needs to interact with the Kubernetes
                          API, for example, for dynamic resource management.
                        type: boolean
                      annotations:
                        description: |
                          Custom annotations for the ServiceAccount. These can be used
                          for integration with cloud providers or security tools.

                          Example uses:
                          - AWS IAM role association
                          - GCP Workload Identity
                          - Azure Pod Identity
                        type: object
                        additionalProperties:
                          type: string
                      name:
                        description: |
                          Name of the ServiceAccount to use. If not set and create is
                          true, a name is generated using the fullname template.

                          If you're using an existing ServiceAccount, specify its name
                          here and set create to false.
                        type: string
                  service:
                    description: |
                      Kubernetes Service configuration for MLflow defines how the service
                      is exposed within and potentially outside the cluster.

                      This configuration is crucial for ensuring proper network access
                      to the MLflow UI and API endpoints.
                    type: object
                    required:
                      - type
                      - port
                    properties:
                      type:
                        description: |
                          Type of Kubernetes Service to create:

                          - ClusterIP: Internal cluster access only
                          - NodePort: Exposed on each node's IP
                          - LoadBalancer: Exposed via cloud provider's load balancer

                          Choose based on your access requirements and infrastructure
                          setup.
                        type: string
                        enum: [ClusterIP, NodePort, LoadBalancer]
                      port:
                        description: |
                          Port number that the MLflow service will listen on. The
                          default MLflow port is 5000, but this can be customized
                          based on your requirements and network policies.
                        type: integer
                        minimum: 1
                        maximum: 65535
                      targetPort:
                        description: |
                          Port number that the MLflow server listens on inside the
                          container. If not specified, it defaults to the service port.

                          This might need adjustment if you've customized the MLflow
                          server configuration.
                        type: integer
                        minimum: 1
                        maximum: 65535
                      nodePort:
                        description: |
                          When type is NodePort, specifies the port to expose on each
                          node. Must be in the Kubernetes NodePort range (30000-32767).

                          If not specified, Kubernetes will automatically assign an
                          available port.
                        type: integer
                        minimum: 30000
                        maximum: 32767
                  ingress:
                    description: |
                      Ingress configuration for MLflow defines how external access to
                      the service is managed. This includes domain configuration, TLS
                      settings, and routing rules.

                      Proper ingress configuration is essential for secure external
                      access to the MLflow UI and API.
                    type: object
                    properties:
                      enabled:
                        description: |
                          Controls whether an Ingress resource should be created for
                          MLflow. Enable this if you need external access to the
                          MLflow interface.
                        type: boolean
                      className:
                        description: |
                          Specifies which Ingress controller should implement this
                          Ingress. Different controllers may have different features
                          and configurations.

                          Examples:
                          - nginx
                          - traefik
                          - istio
                        type: string
                      annotations:
                        description: |
                          Custom annotations for the Ingress resource. These can
                          control various aspects of the Ingress behavior:

                          - SSL/TLS configuration
                          - Rate limiting
                          - Authentication
                          - Custom routing rules
                        type: object
                        additionalProperties:
                          type: string
                      hosts:
                        description: |
                          List of hosts for which this Ingress should handle traffic.
                          Each host can have multiple paths with different routing
                          rules.
                        type: array
                        items:
                          type: object
                          required:
                            - host
                          properties:
                            host:
                              description: |
                                Hostname for this Ingress rule (e.g., mlflow.example.com).
                                Should be a valid domain name that resolves to your
                                cluster's ingress controller.
                              type: string
                            paths:
                              description: |
                                List of paths and their configurations. Each path can
                                route traffic to different backend services or ports.
                              type: array
                              items:
                                type: object
                                required:
                                  - path
                                  - pathType
                                properties:
                                  path:
                                    description: |
                                      URL path for this rule (e.g., /). The path
                                      determines which URLs this rule matches.
                                    type: string
                                  pathType:
                                    description: |
                                      How the path should be matched:

                                      - Exact: Match the URL path exactly
                                      - Prefix: Match based on URL path prefix
                                      - ImplementationSpecific: Use custom matching
                                    type: string
                                    enum: [Exact, Prefix, ImplementationSpecific]
                      tls:
                        description: |
                          TLS configuration for secure HTTPS access. Properly configured
                          TLS is crucial for protecting data in transit.
                        type: object
                        properties:
                          enabled:
                            description: |
                              Enable or disable TLS for this Ingress. Enabling TLS
                              requires valid certificates for the configured hosts.
                            type: boolean
                          secretName:
                            description: |
                              Name of the secret containing the TLS certificate and
                              private key. The secret must exist in the same namespace.
                            type: string
                          extraTLS:
                            description: |
                              Additional TLS configurations for multiple hosts or
                              certificates. Useful when different hosts need different
                              certificates.
                            type: array
                            items:
                              type: object
                              required:
                                - secretName
                                - hosts
                              properties:
                                secretName:
                                  description: |
                                    Name of the secret containing the TLS certificate
                                    and private key for these hosts.
                                  type: string
                                hosts:
                                  description: |
                                    List of hosts that should use this TLS configuration.
                                    All hosts must be covered by the certificate.
                                  type: array
                                  items:
                                    type: string
                  persistentVolume:
                    description: |
                      Persistent Volume configuration for MLflow defines how experiment data,
                      metrics, and artifacts are stored. Proper storage configuration is
                      crucial for maintaining experiment history and ensuring data
                      durability across pod restarts or rescheduling events.

                      The storage configuration directly impacts MLflow's ability to track
                      and preserve machine learning experiments over time.
                    type: object
                    properties:
                      enabled:
                        description: |
                          Controls whether persistent storage should be enabled for MLflow.
                          When enabled, MLflow data persists across pod restarts and
                          rescheduling. When disabled, data is stored in ephemeral storage
                          and will be lost when pods are terminated.

                          Enable this for any non-testing environment where experiment
                          data needs to be preserved.
                        type: boolean
                      accessModes:
                        description: |
                          Defines how the persistent volume can be accessed. The chosen
                          mode must be supported by your storage class and infrastructure:

                          - ReadWriteOnce: Volume can be mounted as read-write by a single node
                          - ReadOnlyMany: Volume can be mounted read-only by many nodes
                          - ReadWriteMany: Volume can be mounted as read-write by many nodes

                          For multi-replica deployments, ReadWriteMany is required unless
                          using a separate backing store like S3.
                        type: array
                        items:
                          type: string
                          enum: [ReadWriteOnce, ReadOnlyMany, ReadWriteMany]
                      size:
                        description: |
                          Size of the persistent volume to request. Choose a size that
                          accommodates your expected data volume including:

                          - Experiment metadata
                          - Metrics and parameters
                          - Model artifacts
                          - Associated files and data

                          Can use standard Kubernetes size notation (e.g., "10Gi", "500Mi").
                        type: string
                        pattern: '^([0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$'
                      storageClass:
                        description: |
                          Name of the StorageClass to use for the persistent volume.
                          The storage class determines the provisioner and characteristics
                          of the allocated storage.

                          Special values:
                          - "": Use cluster's default storage class
                          - "-": Disable dynamic provisioning

                          Choose based on your requirements for:
                          - Performance
                          - Availability
                          - Data durability
                          - Cost considerations
                        type: string
                      volumeBindingMode:
                        description: |
                          Controls when volume binding and dynamic provisioning should occur:

                          - Immediate: Volume is provisioned/bound immediately
                          - WaitForFirstConsumer: Volume is provisioned/bound when pod is created

                          WaitForFirstConsumer is recommended for better pod scheduling
                          in multi-zone clusters.
                        type: string
                        enum: [Immediate, WaitForFirstConsumer]
                      annotations:
                        description: |
                          Custom annotations for the PersistentVolumeClaim. These can
                          influence how the volume is provisioned or managed by storage
                          operators and cloud providers.

                          Examples:
                          - Backup policies
                          - Encryption settings
                          - Performance tier selection
                        type: object
                        additionalProperties:
                          type: string
                      selector:
                        description: |
                          Label selector to bind to a specific PersistentVolume. Use this
                          when you need to ensure the PVC binds to a specific PV with
                          certain characteristics or in specific locations.

                          This is particularly useful when you've pre-provisioned volumes
                          with specific attributes or locations.
                        type: object
                        properties:
                          matchLabels:
                            description: |
                              Map of label keys and values to select the volume.
                              All labels must match for the volume to be selected.
                            type: object
                            additionalProperties:
                              type: string
                          matchExpressions:
                            description: |
                              List of label selector requirements. The requirements are
                              ANDed together for selection.
                            type: array
                            items:
                              type: object
                              required:
                                - key
                                - operator
                              properties:
                                key:
                                  type: string
                                operator:
                                  type: string
                                  enum: [In, NotIn, Exists, DoesNotExist]
                                values:
                                  type: array
                                  items:
                                    type: string
                      volumeName:
                        description: |
                          Name of a specific PersistentVolume to bind to. Use this when
                          you need to bind to a specific, existing volume rather than
                          having one dynamically provisioned.

                          This is useful when you need to:
                          - Reuse an existing volume
                          - Ensure data locality
                          - Use storage with specific characteristics
                        type: string
                  # Security Settings
                  securityContext:
                    description: |
                      Container-level security context for MLflow defines the privileges
                      and access control settings for the MLflow container. These settings
                      are crucial for maintaining a secure deployment that follows the
                      principle of least privilege.
                    type: object
                    additionalProperties: true
                    properties:
                      privileged:
                        description: |
                          Controls whether the container runs in privileged mode.
                          Running containers in privileged mode gives them almost the same
                          access as processes running on the host. This should be avoided
                          unless absolutely necessary for security reasons.
                        type: boolean
                      runAsUser:
                        description: |
                          The UID to run the MLflow process as. Using a non-root user
                          is recommended for security. The UID must have necessary
                          permissions to access required resources.
                        type: integer
                      runAsGroup:
                        description: |
                          The GID to run the MLflow process as. This should be set
                          in conjunction with runAsUser to ensure proper file
                          permissions.
                        type: integer
                      fsGroup:
                        description: |
                          The GID that will own any mounted volumes. This ensures
                          MLflow can read/write to persistent storage with proper
                          permissions.
                        type: integer
                      runAsNonRoot:
                        description: |
                          Forces the container to run as a non-root user. This is a
                          security best practice to prevent potential privilege
                          escalation.
                        type: boolean
                      readOnlyRootFilesystem:
                        description: |
                          Mounts the container's root filesystem as read-only.
                          This prevents modifications to the container's filesystem
                          at runtime, improving security.
                        type: boolean
                      capabilities:
                        description: |
                          Linux capabilities to add or drop for the container.
                          Following the principle of least privilege, drop all
                          capabilities and add only those specifically required.
                        type: object
                        properties:
                          add:
                            type: array
                            items:
                              type: string
                          drop:
                            type: array
                            items:
                              type: string
                  podAnnotations:
                    description: |
                      Pod annotations provide a flexible mechanism for attaching non-identifying metadata
                      to pods in the development environment. Unlike labels, annotations can store
                      arbitrary metadata that enriches pods with additional information and can influence
                      system behavior.

                      Annotations serve multiple crucial purposes in a Kubernetes environment:
                      - They can trigger specific behaviors in other systems and tools
                      - They store build and release information
                      - They configure monitoring and logging systems
                      - They maintain deployment history and tracking
                      - They enable integration with external tools and services

                      In the context of development environments, annotations can be used to:
                      - Store information about the environment's configuration
                      - Track deployment timestamps and versions
                      - Configure service mesh behaviors
                      - Enable specific monitoring patterns
                      - Store documentation links and references
                      - Maintain audit and compliance information

                      Common annotation patterns include:
                      - kubernetes.io/change-cause: Records the reason for the latest update
                      - prometheus.io/scrape: Configures metric collection
                      - sidecar.istio.io/inject: Controls service mesh injection
                      - environment.tools/last-updated: Tracks configuration updates
                      - docs.tools/environment-guide: Links to relevant documentation

                      When using annotations, consider:
                      - They are not used for object selection (use labels instead)
                      - They can store larger data chunks than labels
                      - They can include non-alphanumeric characters
                      - They support structured data in their values
                      - They can be automatically modified by system components
                    type: object
                    additionalProperties:
                      type: string
                  podLabels:
                    description: |
                      Custom labels that will be added to the pods in the development
                      environment. These labels serve multiple important purposes in
                      the Kubernetes ecosystem and are crucial for pod identification
                      and management.

                      Pod labels enable:
                      - Runtime identification and tracking
                      - Capability management
                      - Service discovery
                      - Resource grouping
                      - Policy application
                      - Monitoring and metrics

                      In the KDL context, labels are particularly important for:
                      - Associating pods with specific runtimes
                      - Tracking capability versions
                      - Enabling selective service routing
                      - Supporting audit requirements
                      - Facilitating resource management

                      Example labels include:
                      - runtimeId: Identifies the specific runtime version
                      - capabilityId: Tracks enabled capabilities
                      - environmentType: Distinguishes development environments
                      - userTier: Indicates resource tier allocation
                    type: object
                    additionalProperties:
                      type: string
                  podSecurityContext:
                    description: |
                      Pod-level security context defines security settings that apply
                      to all containers in the MLflow pod. These settings establish
                      the base security posture for the MLflow deployment.
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  initContainers:
                    description: |
                      Configuration for initialization containers that run before the
                      main MLflow container starts. Init containers are crucial for
                      proper setup and validation of the environment before MLflow
                      begins operation.

                      Common uses include:
                      - Database schema initialization
                      - Secret distribution
                      - Permission setup
                      - Resource validation
                      - Service dependency checks
                    type: array
                    items:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                  extraContainers:
                    description: |
                      Additional containers to run alongside the main MLflow container
                      in the same pod. These sidecar containers can provide supporting
                      functionality without modifying the main MLflow container.

                      Typical use cases include:
                      - Logging aggregation
                      - Monitoring agents
                      - Service mesh proxies
                      - Security scanners
                      - Data synchronization
                    type: array
                    items:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                  networkPolicy:
                    description: |
                      Network policies for MLflow control pod-to-pod and external
                      communication. These policies are essential for securing the
                      MLflow service and controlling data access.
                    type: object
                    properties:
                      enabled:
                        description: |
                          Enables or disables network policy creation. When enabled,
                          only explicitly allowed traffic can reach the MLflow pods.
                        type: boolean
                      policyTypes:
                        description: |
                          Types of policies to enforce:
                          - Ingress: Controls incoming traffic
                          - Egress: Controls outgoing traffic

                          Specify both for complete network control.
                        type: array
                        items:
                          type: string
                          enum: [Ingress, Egress]
                      ingress:
                        description: |
                          Rules specifying allowed incoming traffic to MLflow pods.
                          Configure these rules to allow necessary access while
                          maintaining security.
                        type: array
                        items:
                          x-kubernetes-preserve-unknown-fields: true
                      egress:
                        description: |
                          Rules specifying allowed outgoing traffic from MLflow pods.
                          Important for controlling access to external services and
                          artifact storage.
                        type: array
                        items:
                          x-kubernetes-preserve-unknown-fields: true
                  # Resource Management and Scheduling
                  resources:
                    description: |
                      Resource requirements and limits for the MLflow service. Proper resource
                      configuration is essential for optimal performance and efficient
                      cluster resource utilization. MLflow's resource needs can vary
                      significantly based on usage patterns, number of experiments, and
                      concurrent users.
                    type: object
                    properties:
                      limits:
                        description: |
                          Maximum resource limits for the MLflow container. These limits
                          prevent the service from consuming excessive resources that
                          could impact other workloads in the cluster.

                          Consider your usage patterns when setting limits:
                          - Heavy experiment tracking may require more CPU
                          - Model storage and artifact handling need adequate memory
                          - Multiple concurrent users increase resource demands
                        type: object
                        properties:
                          cpu:
                            description: |
                              Maximum CPU resources the MLflow container can use. Can be
                              specified in cores (e.g., "1") or millicores (e.g., "1000m").

                              Consider setting this based on:
                              - Number of concurrent users
                              - Complexity of tracked experiments
                              - Frequency of metric logging
                              - Size and frequency of artifact uploads
                            type: string
                            pattern: '^([0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$'
                          memory:
                            description: |
                              Maximum memory the MLflow container can use. Can be specified
                              in bytes or with SI suffixes (e.g., "2Gi", "512Mi").

                              Memory requirements increase with:
                              - Number of tracked experiments
                              - Size of model artifacts
                              - Concurrent user sessions
                              - Complex query operations
                            type: string
                            pattern: '^([0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$'
                      requests:
                        description: |
                          Minimum resource requests for the MLflow container. These
                          requests help the Kubernetes scheduler make informed decisions
                          about pod placement and ensure the service has sufficient
                          resources to operate effectively.
                        type: object
                        properties:
                          cpu:
                            description: |
                              Minimum CPU resources needed for MLflow to function properly.
                              Setting appropriate requests ensures the service gets the
                              resources it needs while allowing efficient cluster utilization.

                              Base your CPU requests on:
                              - Baseline operational requirements
                              - Minimum acceptable performance levels
                              - Regular workload patterns
                            type: string
                            pattern: '^([0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$'
                          memory:
                            description: |
                              Minimum memory required for MLflow operations. Setting this
                              correctly prevents memory pressure and potential OOM kills.

                              Consider these factors for memory requests:
                              - Base memory footprint of MLflow
                              - Typical experiment metadata size
                              - Common query patterns
                              - Buffer for concurrent operations
                            type: string
                            pattern: '^([0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$'
                  # Advanced Scheduling Configuration
                  podDisruptionBudget:
                    description: |
                      PodDisruptionBudget configuration for MLflow ensures service
                      availability during voluntary disruptions like node drains or
                      cluster upgrades. This is crucial for maintaining service levels
                      in production environments.
                    type: object
                    properties:
                      enabled:
                        description: |
                          Controls whether to create a PodDisruptionBudget for MLflow.
                          Enable this in production environments to maintain service
                          availability during cluster maintenance.
                        type: boolean
                      maxUnavailable:
                        description: |
                          Maximum number of MLflow pods that can be unavailable during
                          voluntary disruptions. Can be an absolute number or percentage.

                          Setting this properly balances between:
                          - Maintaining service availability
                          - Allowing cluster maintenance
                          - Supporting rolling updates
                        x-kubernetes-int-or-string: true
                      minAvailable:
                        description: |
                          Minimum number of MLflow pods that must remain available
                          during voluntary disruptions. Can be an absolute number or
                          percentage.

                          Consider these factors when setting minAvailable:
                          - Required service level objectives
                          - Total number of replicas
                          - Load distribution capabilities
                        x-kubernetes-int-or-string: true
                  autoscaling:
                    description: |
                      Horizontal Pod Autoscaling configuration for MLflow enables
                      automatic scaling based on resource utilization or custom metrics.
                      This helps maintain performance under varying loads while
                      optimizing resource usage.
                    type: object
                    properties:
                      enabled:
                        description: |
                          Enables or disables automatic scaling for MLflow pods.
                          Consider enabling this when your workload has variable
                          demand patterns or periodic spikes in usage.
                        type: boolean
                      minReplicas:
                        description: |
                          Minimum number of MLflow replicas to maintain, even during
                          low demand periods. This ensures a baseline level of
                          availability and performance.

                          Set this based on:
                          - Minimum acceptable performance
                          - Base level of concurrent users
                          - High availability requirements
                        type: integer
                        minimum: 1
                      maxReplicas:
                        description: |
                          Maximum number of MLflow replicas allowed during high demand.
                          This prevents over-provisioning while allowing scaling to
                          handle peak loads.

                          Consider these factors:
                          - Peak concurrent users
                          - Resource availability
                          - Cost constraints
                          - Performance requirements
                        type: integer
                        minimum: 1
                      targetCPUUtilizationPercentage:
                        description: |
                          Target CPU utilization percentage for autoscaling decisions.
                          The HorizontalPodAutoscaler will try to maintain this level
                          of CPU utilization across all pods.

                          Recommended ranges:
                          - 50-75% for balanced performance/efficiency
                          - <50% for more responsive scaling
                          - >75% for higher resource utilization
                        type: integer
                        minimum: 1
                        maximum: 100
                      targetMemoryUtilizationPercentage:
                        description: |
                          Target memory utilization percentage for autoscaling decisions.
                          Like CPU, this helps balance resource usage and performance
                          based on memory consumption patterns.
                        type: integer
                        minimum: 1
                        maximum: 100
                  # Pod Placement Configuration
                  nodeSelector:
                    description: |
                      Node selector constraints for pod assignment. This allows you to
                      specify which nodes the Filebrowser pods can run on based on node
                      labels.
                    type: object
                    additionalProperties:
                      type: string
                  tolerations:
                    description: |
                      Tolerations allow pods to be scheduled on nodes with matching taints.
                      This is useful for dedicating specific nodes to certain workloads
                      or ensuring pods run on nodes with special hardware.
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          description: "The taint key that the toleration applies to"
                          type: string
                        operator:
                          description: "The operator represents the relationship to the value"
                          type: string
                          enum: [Exists, Equal]
                        value:
                          description: "The taint value the toleration matches to"
                          type: string
                        effect:
                          description: "The taint effect to match"
                          type: string
                          enum: [NoSchedule, PreferNoSchedule, NoExecute]
                        tolerationSeconds:
                          description: |
                            Duration in seconds the pod tolerates the taint before being
                            evicted. Only applies to NoExecute effect.
                          type: integer
                  affinity:
                    description: |
                      Pod affinity and anti-affinity rules for fine-grained control over
                      pod placement. These rules can ensure pods are co-located with or
                      separated from other pods based on topology constraints.
                    x-kubernetes-preserve-unknown-fields: true
                  topologySpreadConstraints:
                    description: |
                      Topology spread constraints control how MLflow pods are distributed
                      across your cluster's topology domains (nodes, zones, regions).
                      This ensures proper distribution for availability and performance.
                    type: array
                    items:
                      type: object
                      required:
                        - maxSkew
                        - topologyKey
                        - whenUnsatisfiable
                      properties:
                        maxSkew:
                          description: |
                            Maximum difference in number of pods between topology domains.
                            Lower values ensure more even distribution but may constrain
                            scheduling.
                          type: integer
                          minimum: 1
                        topologyKey:
                          description: |
                            The key of node labels representing the topology domain.
                            Common topology keys:
                            - kubernetes.io/hostname: Node-level spreading
                            - topology.kubernetes.io/zone: Zone-level spreading
                            - topology.kubernetes.io/region: Region-level spreading
                          type: string
                        whenUnsatisfiable:
                          description: |
                            Behavior when constraints cannot be satisfied:
                            - DoNotSchedule: Enforces constraints strictly
                            - ScheduleAnyway: Allows scheduling with preference

                            Choose based on your availability requirements vs.
                            scheduling flexibility needs.
                          type: string
                          enum: [DoNotSchedule, ScheduleAnyway]
                        labelSelector:
                          description: |
                            Label selector to identify MLflow pods for spreading.
                            This allows precise control over which pods are considered
                            for topology spreading rules.
                          x-kubernetes-preserve-unknown-fields: true
                  # Environment and Secrets Management
                  env:
                    description: |
                      Environment variables configuration for MLflow defines the runtime
                      configuration of the service. These variables control MLflow's
                      behavior, integration with other services, and operational parameters.

                      Environment variables are crucial for configuring:
                      - Backend store settings
                      - Artifact store locations
                      - Authentication parameters
                      - Logging configuration
                      - Service endpoints
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                    example:
                      ARTIFACTS_BUCKET: "mlflow-artifacts"
                      MLFLOW_S3_ENDPOINT_URL: "http://minio:9000"
                      MLFLOW_TRACKING_URI: "postgresql://mlflow:password@postgres:5432/mlflow"
                      MLFLOW_PORT: "5000"
                      MLFLOW_HOST: "0.0.0.0"
                  envFromSecrets:
                    description: |
                      Configuration for environment variables that should be populated
                      from Kubernetes Secrets. This is the recommended way to handle
                      sensitive configuration data such as:

                      - Database credentials
                      - API keys
                      - Access tokens
                      - Encryption keys
                      - Authentication credentials

                      Each key in this object represents an environment variable, and
                      the value specifies which Secret and key to use.
                    type: object
                    additionalProperties:
                      type: object
                      required:
                        - name
                        - key
                      properties:
                        name:
                          description: |
                            Name of the Kubernetes Secret containing the desired value.
                            The Secret must exist in the same namespace as MLflow.
                          type: string
                        key:
                          description: |
                            Key within the Secret that contains the value to use.
                            This value will be mounted as an environment variable.
                          type: string
                  envFromConfigMap:
                    description: |
                      Configuration for environment variables that should be populated
                      from ConfigMaps. This is ideal for non-sensitive configuration
                      data that might need to be updated independently of the
                      deployment.

                      Common uses include:
                      - Feature flags
                      - Logging configurations
                      - Service endpoints
                      - Runtime parameters
                    type: object
                    additionalProperties:
                      type: object
                      required:
                        - name
                        - key
                      properties:
                        name:
                          description: |
                            Name of the ConfigMap containing the desired value.
                            The ConfigMap must exist in the same namespace as MLflow.
                          type: string
                        key:
                          description: |
                            Key within the ConfigMap that contains the value to use.
                            This value will be mounted as an environment variable.
                          type: string
                  envFromFiles:
                    description: |
                      List of Secrets or ConfigMaps to mount as environment variables.
                      This allows bulk import of configuration values from files,
                      useful when you have many related configuration items or
                      complex configurations.

                      This approach is particularly useful for:
                      - Large configuration sets
                      - Dynamic configurations
                      - Shared configurations across containers
                    type: array
                    items:
                      type: object
                      properties:
                        secretRef:
                          description: |
                            Reference to a Secret to mount as environment variables.
                            All keys in the Secret will become environment variables.
                          type: object
                          properties:
                            name:
                              description: "Name of the Secret to mount"
                              type: string
                        configMapRef:
                          description: |
                            Reference to a ConfigMap to mount as environment variables.
                            All keys in the ConfigMap will become environment variables.
                          type: object
                          properties:
                            name:
                              description: "Name of the ConfigMap to mount"
                              type: string
                  # Volume Configuration
                  volumes:
                    description: |
                      Additional volumes to mount in the MLflow pods. These volumes can
                      be used for various purposes beyond the main persistent storage,
                      such as:

                      - Configuration files
                      - Temporary storage
                      - Shared data
                      - Certificates and secrets
                      - Custom scripts or plugins
                    type: array
                    items:
                      description: |
                        Volume definition following the Kubernetes volume specification.
                        Supports all standard Kubernetes volume types including:

                        - configMap
                        - secret
                        - emptyDir
                        - hostPath
                        - persistentVolumeClaim
                      x-kubernetes-preserve-unknown-fields: true
                  volumeMounts:
                    description: |
                      Configuration for mounting additional volumes into the MLflow
                      container. This specifies exactly where and how volumes should
                      be mounted in the container filesystem.

                      Proper volume mounting is crucial for:
                      - Data persistence
                      - Configuration management
                      - Secret handling
                      - Temporary storage
                    type: array
                    items:
                      type: object
                      required:
                        - name
                        - mountPath
                      properties:
                        name:
                          description: |
                            Name of the volume to mount. Must correspond to a volume
                            defined in the volumes array.
                          type: string
                        mountPath:
                          description: |
                            Path in the container filesystem where the volume should
                            be mounted. Choose paths that don't conflict with the
                            MLflow application paths.
                          type: string
                        subPath:
                          description: |
                            Optional path within the volume to mount. Useful when you
                            want to mount only a specific directory or file from the
                            volume instead of the entire volume.
                          type: string
                        readOnly:
                          description: |
                            Whether the volume should be mounted read-only. Enable
                            this for security when the container doesn't need to
                            write to the volume.
                          type: boolean
                  # Container Lifecycle Configuration
                  lifecycle:
                    description: |
                      Container lifecycle hooks configuration for MLflow. These hooks
                      allow you to execute commands or make HTTP requests at specific
                      points in the container's lifecycle, ensuring proper
                      initialization and cleanup.
                    type: object
                    properties:
                      postStart:
                        description: |
                          Commands or HTTP requests to execute after the container
                          starts but before it is marked as ready. Useful for:

                          - Additional initialization
                          - Service registration
                          - Runtime configuration
                          - Dependency checks

                          Note: postStart runs asynchronously with container startup
                        x-kubernetes-preserve-unknown-fields: true
                      preStop:
                        description: |
                          Commands or HTTP requests to execute before the container
                          is terminated. Essential for graceful shutdown procedures:

                          - Saving state
                          - Closing connections
                          - Cleanup operations
                          - Notification of shutdown

                          Note: preStop must complete before container termination
                        x-kubernetes-preserve-unknown-fields: true
                  terminationGracePeriodSeconds:
                    description: |
                      Duration in seconds Kubernetes will wait for the container to
                      stop gracefully before forcefully terminating it. This period
                      should be long enough to allow:

                      - Completion of active requests
                      - State persistence
                      - Resource cleanup
                      - Connection draining
                    type: integer
                    minimum: 0
                  # Health Checks
                  livenessProbe:
                    description: |
                      Liveness probe configuration determines if the MLflow container
                      is operating correctly. Failed liveness probes result in container
                      restart, helping maintain service health through automatic
                      recovery.
                      Configure this probe considering:
                      - Startup time requirements
                      - Recovery time objectives
                      - Application health indicators.
                    type: object
                    properties:
                      enabled:
                        description: "Whether this probe is enabled."
                        type: boolean
                      failureThreshold:
                        description: |
                          Number of times the probe must fail before giving up and
                          marking the container as unhealthy.
                        type: integer
                        minimum: 1
                      initialDelaySeconds:
                        description: |
                          Number of seconds to wait before performing the first probe.
                        type: integer
                        minimum: 0
                      periodSeconds:
                        description: "How often to perform the probe."
                        type: integer
                        minimum: 1
                      successThreshold:
                        description: |
                          Minimum consecutive successes required to consider the probe
                          successful.
                        type: integer
                        minimum: 1
                      timeoutSeconds:
                        description: "Number of seconds before probe times out."
                        type: integer
                        minimum: 1
                  livenessProbeCustom:
                    description: |
                      Liveness probe configuration determines if a container is operating
                      properly and should continue running. This probe helps maintain
                      service health by automatically restarting unhealthy containers.

                      Liveness probes are crucial for:
                      - Detecting application deadlocks
                      - Identifying hung processes
                      - Managing memory leaks
                      - Handling unrecoverable errors
                      - Maintaining service reliability

                      The probe should check:
                      - Basic application health
                      - Critical service functions
                      - Resource availability
                      - System stability
                      - Core dependencies
                    type: object
                    properties:
                      httpGet:
                        description: |
                          HTTP GET request configuration for liveness checking. Should
                          verify basic service health without heavy processing.

                          The endpoint should:
                          - Respond quickly
                          - Check critical functions
                          - Avoid external dependencies
                          - Minimize resource usage
                          - Provide clear health status
                        type: object
                        properties:
                          path:
                            description: |
                              URL path for the liveness check. Should be a lightweight
                              endpoint that confirms basic service health.
                            type: string
                          port:
                            description: |
                              Port number where the liveness check endpoint is exposed.
                              Should be consistently available.
                            type: integer
                      failureThreshold:
                        description: |
                          Number of times the probe can fail before triggering a container
                          restart. Balance between reliability and stability.
                        type: integer
                      initialDelaySeconds:
                        description: |
                          Time to wait after container startup before beginning liveness
                          checks. Must exceed normal startup time.
                        type: integer
                      periodSeconds:
                        description: |
                          Interval between probe attempts. More frequent checks provide
                          faster detection of issues.
                        type: integer
                      successThreshold:
                        description: |
                          Number of consecutive successes required after failure to
                          consider the container healthy again.
                        type: integer
                      timeoutSeconds:
                        description: |
                          Maximum time allowed for a probe attempt. Should be short
                          enough to detect hanging processes.
                        type: integer
                  readinessProbe:
                    description: |
                      Readiness probe configuration determines if the MLflow container
                      is ready to handle requests. Failed readiness probes remove the
                      pod from service endpoints until it recovers.
                      Important considerations:
                      - Database connectivity
                      - Required service dependencies
                      - Resource availability
                      - Initialization completion.
                    type: object
                    properties:
                      enabled:
                        description: "Whether this probe is enabled."
                        type: boolean
                      failureThreshold:
                        description: |
                          Number of times the probe must fail before giving up and
                          marking the container as not ready.
                        type: integer
                        minimum: 1
                      initialDelaySeconds:
                        description: |
                          Number of seconds to wait before performing the first probe.
                        type: integer
                        minimum: 0
                      periodSeconds:
                        description: "How often to perform the probe."
                        type: integer
                        minimum: 1
                      successThreshold:
                        description: |
                          Minimum consecutive successes required to consider the probe
                          successful.
                        type: integer
                        minimum: 1
                      timeoutSeconds:
                        description: "Number of seconds before probe times out."
                        type: integer
                        minimum: 1
                  readinessProbeCustom:
                    description: |
                      Readiness probe configuration determines when a container is ready
                      to accept traffic. This probe is crucial for ensuring that only
                      fully functional instances receive requests.

                      Readiness probes are essential for:
                      - Service availability management
                      - Load balancer configuration
                      - Traffic routing control
                      - Deployment orchestration
                      - Service mesh integration

                      The probe should verify:
                      - Required services are available
                      - Dependencies are accessible
                      - Database connections are established
                      - Cache is warmed up
                      - System resources are ready
                    type: object
                    properties:
                      httpGet:
                        description: |
                          HTTP GET request configuration for service readiness checking.
                          Should verify that the service is fully operational.

                          The endpoint should validate:
                          - Application readiness
                          - Database connectivity
                          - Cache availability
                          - External service access
                          - Required resources
                        type: object
                        properties:
                          path:
                            description: |
                              URL path that indicates service readiness. Should return
                              success only when the service is fully operational.
                            type: string
                          port:
                            description: |
                              Port number for the readiness check. Must be accessible
                              within the cluster.
                            type: integer
                      failureThreshold:
                        description: |
                          Number of consecutive probe failures before marking the container
                          as not ready. Affects service availability during issues.
                        type: integer
                      initialDelaySeconds:
                        description: |
                          Time to wait before starting readiness checks. Should account
                          for normal service initialization time.
                        type: integer
                      periodSeconds:
                        description: |
                          Frequency of readiness checks. Balance between responsiveness
                          and system load.
                        type: integer
                      successThreshold:
                        description: |
                          Number of consecutive successes required after failure before
                          marking container as ready.
                        type: integer
                      timeoutSeconds:
                        description: |
                          Timeout for readiness probe attempts. Should be less than
                          periodSeconds.
                        type: integer
                  startupProbe:
                    description: |
                      Startup probe configuration helps handle slow-starting MLflow
                      containers. This probe takes precedence over liveness and
                      readiness probes during startup, preventing premature restarts.
                      Particularly important when:
                      - Initial startup is slow
                      - Database migrations are needed
                      - Large models need loading
                      - Cache warming is required.
                    type: object
                    properties:
                      enabled:
                        description: "Whether this probe is enabled."
                        type: boolean
                      failureThreshold:
                        description: |
                          Number of times the probe must fail before giving up and
                          marking the container as not started.
                        type: integer
                        minimum: 1
                      initialDelaySeconds:
                        description: |
                          Number of seconds to wait before performing the first probe.
                        type: integer
                        minimum: 0
                      periodSeconds:
                        description: "How often to perform the probe."
                        type: integer
                        minimum: 1
                      successThreshold:
                        description: |
                          Minimum consecutive successes required to consider the probe
                          successful.
                        type: integer
                        minimum: 1
                      timeoutSeconds:
                        description: "Number of seconds before probe times out."
                        type: integer
                        minimum: 1
                  startupProbeCustom:
                    description: |
                      Startup probe configuration helps handle slow-starting containers by
                      providing additional time for initialization before other probes begin.
                      This is particularly important for development environments that may
                      require significant setup time for tools and dependencies.

                      A startup probe serves several critical purposes:
                      - Prevents premature container restarts during initialization
                      - Accommodates varying startup times across different environments
                      - Ensures proper tool and dependency initialization
                      - Provides time for runtime compilation and cache warming
                      - Maintains service stability during startup phases

                      The probe can be configured to check different aspects of readiness:
                      - HTTP endpoints for web-based services
                      - TCP ports for network services
                      - Command execution for system checks
                      - File system markers for initialization completion
                      - Service-specific health indicators
                    type: object
                    properties:
                      httpGet:
                        description: |
                          HTTP GET request configuration for health checking. This method
                          is commonly used for web-based services and APIs.

                          The HTTP check validates:
                          - Service availability
                          - Basic functionality
                          - Network accessibility
                          - Authentication readiness
                          - Required dependencies
                        type: object
                        properties:
                          path:
                            description: |
                              URL path to check for service health. Should be an endpoint
                              that accurately reflects service readiness.
                            type: string
                          port:
                            description: |
                              Port number where the health check endpoint is exposed.
                              Must match the service's configured port.
                            type: integer
                      failureThreshold:
                        description: |
                          Number of times the probe can fail before giving up. Higher
                          values provide more tolerance for temporary issues during startup.
                        type: integer
                      initialDelaySeconds:
                        description: |
                          Time to wait after container startup before beginning probe
                          checks. Should account for typical initialization time.
                        type: integer
                      periodSeconds:
                        description: |
                          Interval between probe attempts. Balance between quick detection
                          and resource usage.
                        type: integer
                      successThreshold:
                        description: |
                          Minimum consecutive successes required to consider the probe
                          successful after failure.
                        type: integer
                      timeoutSeconds:
                        description: |
                          Maximum time allowed for a probe attempt before considering
                          it failed.
                        type: integer
          status:
            description: |
              Status defines the observed state of the KDL Project and its components.
              This section provides real-time information about the deployment state,
              health, and operational conditions of the project's services.

              The status is automatically updated by the controller to reflect the
              current state of the project and its resources, providing valuable
              information for monitoring and troubleshooting.
            type: object
            properties:
              conditions:
                description: |
                  List of status conditions describing the current state of the KDL
                  Project. Conditions represent point-in-time observations of the
                  project's operational state.

                  These conditions help operators understand:
                  - Current project health
                  - Service availability
                  - Resource states
                  - Error conditions
                  - Progress of operations
                type: array
                items:
                  description: |
                    Individual condition entries providing detailed status information
                    about specific aspects of the KDL Project.
                  type: object
                  required:
                    - type
                    - status
                    - lastTransitionTime
                  properties:
                    type:
                      description: |
                        Type of condition being reported. Common types include:
                        - Ready: Overall project readiness
                        - MLflowAvailable: MLflow service status
                        - FilebrowserAvailable: Filebrowser service status
                        - StorageProvisioned: Storage readiness
                        - ConfigurationValid: Configuration status
                      type: string
                    status:
                      description: |
                        Status of the condition, indicating whether it is satisfied.
                        Values can be:
                        - "True": Condition is met
                        - "False": Condition is not met
                        - "Unknown": Status cannot be determined
                      type: string
                    lastTransitionTime:
                      description: |
                        Timestamp of when the condition last transitioned from one
                        status to another. This helps track the timeline of state
                        changes and troubleshoot issues.
                      type: string
                      format: date-time
                    reason:
                      description: |
                        Machine-readable, camel-case reason for the condition's last
                        transition. Used for automated processing and troubleshooting.

                        Examples:
                        - CreateComplete
                        - ConfigError
                        - ResourceUnavailable
                      type: string
                    message:
                      description: |
                        Human-readable message indicating details about the last
                        transition. Provides context about why a condition changed
                        and what might need attention.
                      type: string
              phase:
                description: |
                  High-level summary of the project's current phase in its lifecycle.
                  This provides a quick way to understand the project's overall state.

                  Common phases include:
                  - Pending: Initial setup in progress
                  - Provisioning: Resources being created
                  - Running: Project is operational
                  - Failed: Error state
                  - Terminating: Project is being cleaned up
                type: string
                enum:
                  - Pending
                  - Provisioning
                  - Running
                  - Failed
                  - Terminating
              componentStatuses:
                description: |
                  Detailed status information for each major component of the KDL
                  Project. This provides granular insight into the state of individual
                  services and resources.
                type: object
                properties:
                  mlflow:
                    description: |
                      Status details specific to the MLflow deployment, including:
                      - Deployment state
                      - Available replicas
                      - Service endpoints
                      - Resource status
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
                  filebrowser:
                    description: |
                      Status details specific to the Filebrowser deployment, including:
                      - Deployment state
                      - Available replicas
                      - Service endpoints
                      - Storage status
                    type: object
                    x-kubernetes-preserve-unknown-fields: true
            x-kubernetes-preserve-unknown-fields: true
    subresources:
      status: {}
