# Default values for kai
# This is a YAML-formatted file
# Declare variables to be passed into your templates

global:
  # -- Specifies the registry to pull images from. Leave empty for the default registry
  imageRegistry: ""

  # -- Specifies the secrets to use for pulling images from private registries
  # Leave empty if no secrets are required
  # E.g.
  # imagePullSecrets:
  #   - name: myRegistryKeySecretName
  imagePullSecrets: []

  # -- Environment variables to configure application
  env: {}
    # MY_VARIABLE: value

  # -- Variables from secrets
  envFromSecrets: {}
    # MY_VARIABLE:
    #   name: <name-secret>
    #   key: secret_key

  # -- Variables from configMap
  envFromConfigMap: {}
    # MY_VARIABLE:
    #   name: <name-configmap>
    #   key: key

  # -- Load all variables from files
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
  envFromFiles: []
    # - secretRef:
    #     name: <name-secret>
    # - configMapRef:
    #     name: <name-configmap>

# -- String to partially override kai.fullname template (will maintain the release name)
nameOverride: ""

# -- String to fully override kai.fullname template
fullnameOverride: ""

# -- Enable or disable test connection
testConnection:
  # Specifies whether a test connection should be created
  enabled: false
  # The repository of the image
  repository: busybox
  # Overrides the image tag
  tag: "latest"

# -- adminAPI
adminApi:
  # -- Number of replicas
  # Specifies the number of replicas for the service
  replicaCount: 1

  # -- Deployment strategy
  # Specifies the strategy used to replace old Pods by new ones
  deploymentStrategy: Recreate

  # -- Image registry
  # The image configuration for the base service
  image:
    # The repository of the image
    repository: registry.gitlab.intelygenz.com/konstellation-io/kai/kai/kai-admin-api
    # The pull policy for the image
    pullPolicy: IfNotPresent
    # The image tag
    tag: "1.0.0"

  # -- Specifies the secrets to use for pulling images from private registries
  # Leave empty if no secrets are required
  # E.g.
  # imagePullSecrets:
  #   - name: myRegistryKeySecretName
  imagePullSecrets: []

  # -- Enable creation of ServiceAccount
  # </br> Ref: https://kubernetes.io/docs/concepts/security/service-accounts/
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- Environment variables to configure application
  # </br> Ref: https://github.com/konstellation-io/kdl-server/tree/main/app/api
  env: {}
    ## API
    # KAI_ADMIN_API_PORT: "8080"
    # KAI_ADMIN_CORS_ENABLED: "true"
    # KAI_API_LOG_LEVEL: "INFO"
    # KAI_SERVICES_K8S_MANAGER: "<release-name>-k8s-manager:50051"
    # KAI_SERVICES_NATS_MANAGER: "<release-name>-nats-manager:50051"

    ## KEYCLOAK
    # KAI_KEYCLOAK_ADMIN_CLIENT_ID: ""
    # KAI_KEYCLOAK_ADMIN_PASSWORD: ""
    # KAI_KEYCLOAK_ADMIN_USERNAME: ""
    # KAI_KEYCLOAK_BASE_URL: ""
    # KAI_KEYCLOAK_MASTER_REALM: ""
    # KAI_KEYCLOAK_REALM: ""

    ## REGISTRY
    # KAI_REGISTRY_BASIC_AUTH: ""
    # KAI_REGISTRY_HOST: ""

    ## MINIO
    # KAI_MINIO_ENDPOINT_URL: ""
    # KAI_MINIO_REGION: ""
    # KAI_MINIO_ROOT_PASSWORD: ""
    # KAI_MINIO_ROOT_USER: ""
    # KAI_MINIO_TIER_ENABLED: ""
    # KAI_MINIO_TIER_NAME: ""

    ## MONGODB
    # KAI_MONGODB_DATABASE: ""
    # KAI_MONGODB_URI: ""

    ## LOKI
    # KAI_LOKI_ADDRESS: ""

    ## REDIS
    # KAI_REDIS_MASTER_ADDRESS: ""

    ## SECRET
    # KAI_VAULT_ENDPOINT: ""
    # KAI_VAULT_ROOT_PATH: ""
    # KAI_VAULT_TOKEN: ""

  # -- Variables from secrets
  envFromSecrets: {}
    # MY_VARIABLE:
    #   name: <name-secret>
    #   key: secret_key

  # -- Variables from configMap
  envFromConfigMap: {}
    # MY_VARIABLE:
    #   name: <name-configmap>
    #   key: key

  # -- Load all variables from files
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
  envFromFiles: []
    # - secretRef:
    #     name: <name-secret>
    # - configMapRef:
    #     name: <name-configmap>

  # -- Secrets values to create credentials and reference by envFromSecrets
  # Generate Secret with following name: <release-name>-<name>
  # </br> Ref: https://kubernetes.io/docs/concepts/configuration/secret/
  secrets: []
    # - name: secret-name
    #   data:
    #     my.key: |-
    #       my-content
    #     my_var: my-value

  # -- Configure extra containers
  extraContainers: []
    # - name: project-proxy
    #   image: nginx:alpine
    #   command: ['sh', '-c', 'echo "Hello, World!"']

  # -- Configure additional containers
  # </br> Ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  initContainers: []
    # - name: my-container
    #   image: busybox
    #   command: ['sh', '-c', 'echo "Hello, World!"']

  # -- Configure args
  # </br> Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/
  args: []
    # - -c
    # - echo "Hello, World!"

  # -- Configure command
  # </br> Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/
  command: []
    # - echo
    # - "Hello, World!"

  # -- Kubernetes service to expose Pod
  # </br> Ref: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    # -- Kubernetes Service type. Allowed values: NodePort, LoadBalancer or ClusterIP
    type: ClusterIP
    # -- Kubernetes Service port
    port: 8080
    # -- Kubernetes Service health check path
    # healthPath: ""
    # -- NodePort port (only when type is NodePort)
    # nodePort: 32000
    # -- Pod expose port
    # targetPort: 8080
    # -- Pod extra ports
    # extraPorts:
    # - name: metrics
    #   port: 9080
    #   targetPort: 9080

  # -- Ingress configuration to expose app
  # </br> Ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # konghq.com/plugins: <release>-oidc
      # konghq.com/strip-path: "false"
    hosts:
    - host: chart-example.kai.local
      paths:
      - path: /
        pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #    - chart-example.kai.local

  # -- NetworkPolicy configuration
  # </br> Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  networkPolicy:
    # -- Enable or disable NetworkPolicy
    enabled: false
    # -- Policy types
    policyTypes: []
      # - Ingress
      # - Egress
    ingress: []
      # - from:
      #   - ipBlock:
      #       cidr: 172.17.0.0/16
      #       except:
      #       - 172.17.1.0/24
      #   - namespaceSelector:
      #       matchLabels:
      #         project: myproject
      #   - podSelector:
      #       matchLabels:
      #         role: frontend
      #   ports:
      #   - protocol: TCP
      #     port: 6379
    egress: []
      # - to:
      #   - ipBlock:
      #       cidr: 10.0.0.0/24
      #   ports:
      #   - protocol: TCP
      #     port: 5978

  # -- Configure lifecycle hooks
  # </br> Ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
  # </br> Ref: https://learnk8s.io/graceful-shutdown
  lifecycle: {}
    # preStop:
    #   exec:
    #     command: ["sh", "-c", "sleep 10"]

  # -- Configure Pod termination grace period
  # </br> Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination
  terminationGracePeriodSeconds: 30

  # -- Configure liveness checker
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
  livenessProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 180
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5

  # -- Custom livenessProbe
  livenessProbeCustom: {}
    # httpGet:
    #   path: /dashboard
    #   port: 4000
    # failureThreshold: 3
    # initialDelaySeconds: 200
    # periodSeconds: 30
    # successThreshold: 1
    # timeoutSeconds: 5

  # -- Configure readinessProbe checker
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
  readinessProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1

  # -- Custom readinessProbe
  readinessProbeCustom: {}
    # httpGet:
    #   path: /dashboard
    #   port: 4000
    # failureThreshold: 3
    # initialDelaySeconds: 200
    # periodSeconds: 30
    # successThreshold: 1
    # timeoutSeconds: 5

  # -- Configure startupProbe checker
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
  startupProbe:
    enabled: false
    failureThreshold: 30
    initialDelaySeconds: 180
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5

  # -- Custom startupProbe
  startupProbeCustom: {}
    # httpGet:
    #   path: /dashboard
    #   port: 4000
    # failureThreshold: 3
    # initialDelaySeconds: 200
    # periodSeconds: 30
    # successThreshold: 1
    # timeoutSeconds: 5

  # -- Check if dependencies are ready
  readyChecker:
    # -- Enable or disable ready-checker
    enabled: false
    # -- Repository of the image
    repository: busybox
    # -- Pull policy for the image
    pullPolicy: IfNotPresent
    # -- Overrides the image tag
    tag: "latest"
    # -- Number of retries before giving up
    retries: 30
    # -- Timeout for each check
    timeout: 5
    # -- List services
    services:
    # - name: service_name
    #   port: service_port
    #   address: service_address  # (Optional) This parameter is optional. If
    #   not specified, the address for the check will be automatically
    #   determined assuming the service was installed using a subchart. It is
    #   useful to specify it when the service is provisioned differently (e.g.,
    #   an S3 bucket created in the Cloud or an Elasticsearch instance outside
    #   the Kubernetes cluster). The address can be an IP address or a DNS name.
    - name: mongodb
      port: 27017
    - name: keycloak
      port: 80

  # -- Enable ServiceMonitor to get metrics
  # </br> Ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#servicemonitor
  serviceMonitor:
    # -- Enable or disable
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings: []
    relabelings: []

  # -- Configure annotations on Pods
  podAnnotations: {}

  # -- Configure labels on Pods
  podLabels: {}

  # -- Defines privilege and access control settings for a Pod
  # </br> Ref: https://kubernetes.io/docs/concepts/security/pod-security-standards/
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  podSecurityContext:
    fsGroup: 10001

  # -- Defines privilege and access control settings for a Container
  # </br> Ref: https://kubernetes.io/docs/concepts/security/pod-security-standards/
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # -- Resources limits and requested
  # </br> Ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- Pod Disruption Budget
  # </br> Ref: https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/pod-disruption-budget-v1/
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
    minAvailable:

  # -- Autoscaling with CPU or memory utilization percentage
  # </br> Ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # -- Additional volumes on the output Deployment definition
  # </br> Ref: https://kubernetes.io/docs/concepts/storage/volumes/
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
  # </br> Ref: https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#create-a-pod-that-has-access-to-the-secret-data-through-a-volume
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # -- Additional volumeMounts on the output Deployment definition
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  # -- Node labels for pod assignment
  # </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  nodeSelector: {}

  # -- Tolerations for pod assignment
  # </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  tolerations: []

  # -- Affinity for pod assignment
  # </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  # -- Control how Pods are spread across your cluster
  # </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/#example-multiple-topologyspreadconstraints
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: zone
  #   whenUnsatisfiable: DoNotSchedule

# -- K8S manager
k8sManager:
  # -- Image registry
  # The image configuration for the base service
  image:
    # The repository of the image
    repository: registry.gitlab.intelygenz.com/konstellation-io/kai/kai/kai-k8s-manager
    # The pull policy for the image
    pullPolicy: IfNotPresent
    # The image tag
    tag: "1.0.0"

  # -- Deployment strategy
  # Specifies the strategy used to replace old Pods by new ones
  deploymentStrategy: Recreate

  # -- Specifies the secrets to use for pulling images from private registries
  # Leave empty if no secrets are required
  # E.g.
  # imagePullSecrets:
  #   - name: myRegistryKeySecretName
  imagePullSecrets: []

  # -- Enable creation of ServiceAccount
  # </br> Ref: https://kubernetes.io/docs/concepts/security/service-accounts/
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- Creation of resources RBAC
  # </br> Ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/
  rbac:
    # Specifies whether RBAC resources should be created
    create: true

  # -- Environment variables to configure application
  # </br> Ref: https://github.com/konstellation-io/kdl-server/tree/main/app/api
  env: {}
    ## TRIGGERS
    # KAI_TRIGGERS_BASE64_INGRESSES_ANNOTATIONS: ""
    # KAI_TRIGGERS_INGRESS_CLASS_NAME: ""
    # KAI_TRIGGERS_REQUEST_TIMEOUT: "30"
    # KAI_TRIGGERS_TLS_CERT_SECRET_NAME: ""
    # KAI_TRIGGERS_TLS_ENABLED: ""

    ## NATS
    # KAI_NATS_URL: ""

    ## REGISTRY
    # KAI_REGISTRY_AUTH_SECRET_NAME: ""
    # KAI_REGISTRY_INSECURE: ""
    # KAI_REGISTRY_URL: ""

    ## MINIO
    # KAI_MINIO_ENDPOINT_URL: ""
    # KAI_MINIO_REGION: ""
    # MINIO_ROOT_PASSWORD: ""
    # MINIO_ROOT_USER: ""

    ## KEYCLOAK
    # KAI_KEYCLOAK_BASE_URL: ""
    # KAI_KEYCLOAK_MINIO_CLIENT_ID: ""
    # KAI_KEYCLOAK_REALM: ""
    # KEYCLOAK_MINIO_CLIENT_SECRET: ""

    ## FLUENTBIT
    # KAI_FLUENTBIT_IMAGE_PULLPOLICY: "IfNotPresent"
    # KAI_FLUENTBIT_IMAGE_REPOSITORY: "fluent/fluent-bit"
    # KAI_FLUENTBIT_IMAGE_TAG: "2.2.0"

    ## TELEGRAFT
    # KAI_TELEGRAF_IMAGE_PULLPOLICY: "IfNotPresent"
    # KAI_TELEGRAF_IMAGE_REPOSITORY: "telegraf"
    # KAI_TELEGRAF_IMAGE_TAG: "1.28.5"
    # KAI_TELEGRAF_METRICS_PORT: ""

    ## LOKI
    # KAI_LOKI_HOST: ""
    # KAI_LOKI_PORT: ""

    ## IMAGE BUILDER
    # KAI_IMAGE_BUILDER_IMAGE_REPOSITORY: "gcr.io/kaniko-project/executor"
    # KAI_IMAGE_BUILDER_IMAGE_TAG: "v1.18.0"
    # KAI_IMAGE_BUILDER_IMAGE_PULLPOLICY: "IfNotPresent"
    # KAI_IMAGE_BUILDER_LOGLEVEL: "info"
    # KAI_IMAGE_BUILDER_NETRC_ENABLED: "false"
    # KAI_IMAGE_BUILDER_NETRC_SECRET_NAME: ""

    ## REDIS
    # KAI_REDIS_MASTER_ADDRESS: ""

  # WIP: registry. restore?
  # registry:
  #   netrc:
  #     # -- .netrc file content. Ref: https://everything.curl.dev/usingcurl/netrc
  #     content: ""
  #     ## example:
  #     # content: |
  #     #   machine booster    login baxter  password swordfish
  #     #   machine wooster    login francis password sw0rdf1sh

  #   pullCredentials:
  #     # -- Whether to add pull credentials to the image builder's jobs (needed to pull base images from private registries or proxies)
  #     enabled: false
  #     # -- The registry server
  #     registry: "https://index.docker.io/v1/"
  #     # -- The registry username
  #     username: ""
  #     # -- The registry password
  #     password: ""
  #     ## Example:
  #     # enabled: true
  #     # server: registry.github.com
  #     # username: github-username
  #     # password: github-password

  # -- Variables from secrets
  envFromSecrets: {}
    # MY_VARIABLE:
    #   name: <name-secret>
    #   key: secret_key

  # -- Variables from configMap
  envFromConfigMap: {}
    # MY_VARIABLE:
    #   name: <name-configmap>
    #   key: key

  # -- Load all variables from files
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
  envFromFiles: []
    # - secretRef:
    #     name: <name-secret>
    # - configMapRef:
    #     name: <name-configmap>

  # -- Secrets values to create credentials and reference by envFromSecrets
  # Generate Secret with following name: <release-name>-<name>
  # </br> Ref: https://kubernetes.io/docs/concepts/configuration/secret/
  secrets: []
    # - name: secret-name
    #   data:
    #     my.key: |-
    #       my-content
    #     my_var: my-value

  # -- Configure extra containers
  extraContainers: []
    # - name: project-proxy
    #   image: nginx:alpine
    #   command: ['sh', '-c', 'echo "Hello, World!"']

  # -- Configure additional containers
  # </br> Ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  initContainers: []
    # - name: my-container
    #   image: busybox
    #   command: ['sh', '-c', 'echo "Hello, World!"']

  # -- Configure args
  # </br> Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/
  args: []
    # - -c
    # - echo "Hello, World!"

  # -- Configure command
  # </br> Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/
  command: []
    # - echo
    # - "Hello, World!"

  # -- Kubernetes service to expose Pod
  # </br> Ref: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    # -- Kubernetes Service port
    port: 50051
    # -- Kubernetes Service health check path
    # healthPath: ""
    # -- Pod expose port
    # targetPort: 8080
    # -- Pod extra ports
    # extraPorts:
    # - name: metrics
    #   port: 9080
    #   targetPort: 9080

  # -- NetworkPolicy configuration
  # </br> Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  networkPolicy:
    # -- Enable or disable NetworkPolicy
    enabled: false
    # -- Policy types
    policyTypes: []
      # - Ingress
      # - Egress
    ingress: []
      # - from:
      #   - ipBlock:
      #       cidr: 172.17.0.0/16
      #       except:
      #       - 172.17.1.0/24
      #   - namespaceSelector:
      #       matchLabels:
      #         project: myproject
      #   - podSelector:
      #       matchLabels:
      #         role: frontend
      #   ports:
      #   - protocol: TCP
      #     port: 6379
    egress: []
      # - to:
      #   - ipBlock:
      #       cidr: 10.0.0.0/24
      #   ports:
      #   - protocol: TCP
      #     port: 5978

  # -- Configure lifecycle hooks
  # </br> Ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
  # </br> Ref: https://learnk8s.io/graceful-shutdown
  lifecycle: {}
    # preStop:
    #   exec:
    #     command: ["sh", "-c", "sleep 10"]

  # -- Configure Pod termination grace period
  # </br> Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination
  terminationGracePeriodSeconds: 30

  # -- Configure liveness checker
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
  livenessProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 180
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5

  # -- Custom livenessProbe
  livenessProbeCustom: {}
    # httpGet:
    #   path: /dashboard
    #   port: 4000
    # failureThreshold: 3
    # initialDelaySeconds: 200
    # periodSeconds: 30
    # successThreshold: 1
    # timeoutSeconds: 5

  # -- Configure readinessProbe checker
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
  readinessProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1

  # -- Custom readinessProbe
  readinessProbeCustom: {}
    # httpGet:
    #   path: /dashboard
    #   port: 4000
    # failureThreshold: 3
    # initialDelaySeconds: 200
    # periodSeconds: 30
    # successThreshold: 1
    # timeoutSeconds: 5

  # -- Configure startupProbe checker
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
  startupProbe:
    enabled: false
    failureThreshold: 30
    initialDelaySeconds: 180
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5

  # -- Custom startupProbe
  startupProbeCustom: {}
    # httpGet:
    #   path: /dashboard
    #   port: 4000
    # failureThreshold: 3
    # initialDelaySeconds: 200
    # periodSeconds: 30
    # successThreshold: 1
    # timeoutSeconds: 5

  # -- Check if dependencies are ready
  readyChecker:
    # -- Enable or disable ready-checker
    enabled: false
    # -- Repository of the image
    repository: busybox
    # -- Pull policy for the image
    pullPolicy: IfNotPresent
    # -- Overrides the image tag
    tag: "latest"
    # -- Number of retries before giving up
    retries: 30
    # -- Timeout for each check
    timeout: 5
    # -- List services
    services:
    # - name: service_name
    #   port: service_port
    #   address: service_address  # (Optional) This parameter is optional. If
    #   not specified, the address for the check will be automatically
    #   determined assuming the service was installed using a subchart. It is
    #   useful to specify it when the service is provisioned differently (e.g.,
    #   an S3 bucket created in the Cloud or an Elasticsearch instance outside
    #   the Kubernetes cluster). The address can be an IP address or a DNS name.
    - name: mongodb
      port: 27017
    - name: keycloak
      port: 80

  # -- Enable ServiceMonitor to get metrics
  # </br> Ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#servicemonitor
  serviceMonitor:
    # -- Enable or disable
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings: []
    relabelings: []

  # -- Configure annotations on Pods
  podAnnotations: {}

  # -- Configure labels on Pods
  podLabels: {}

  # -- Defines privilege and access control settings for a Pod
  # </br> Ref: https://kubernetes.io/docs/concepts/security/pod-security-standards/
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  podSecurityContext: {}
    # fsGroup: 2000

  # -- Defines privilege and access control settings for a Container
  # </br> Ref: https://kubernetes.io/docs/concepts/security/pod-security-standards/
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # -- Resources limits and requested
  # </br> Ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- Pod Disruption Budget
  # </br> Ref: https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/pod-disruption-budget-v1/
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
    minAvailable:

  # -- Autoscaling with CPU or memory utilization percentage
  # </br> Ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # -- Additional volumes on the output Deployment definition
  # </br> Ref: https://kubernetes.io/docs/concepts/storage/volumes/
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
  # </br> Ref: https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#create-a-pod-that-has-access-to-the-secret-data-through-a-volume
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # -- Additional volumeMounts on the output Deployment definition
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  # -- Node labels for pod assignment
  # </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  nodeSelector: {}

  # -- Tolerations for pod assignment
  # </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  tolerations: []

  # -- Affinity for pod assignment
  # </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  # -- Control how Pods are spread across your cluster
  # </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/#example-multiple-topologyspreadconstraints
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: zone
  #   whenUnsatisfiable: DoNotSchedule

# -- NATS manager
natsManager:
  # -- Image registry
  # The image configuration for the base service
  image:
    # The repository of the image
    repository: registry.gitlab.intelygenz.com/konstellation-io/kai/kai/kai-nats-manager
    # The pull policy for the image
    pullPolicy: IfNotPresent
    # The image tag
    tag: "1.0.0"

  # -- Deployment strategy
  # Specifies the strategy used to replace old Pods by new ones
  deploymentStrategy: Recreate

  # -- Specifies the secrets to use for pulling images from private registries
  # Leave empty if no secrets are required
  # E.g.
  # imagePullSecrets:
  #   - name: myRegistryKeySecretName
  imagePullSecrets: []

  # -- Enable creation of ServiceAccount
  # </br> Ref: https://kubernetes.io/docs/concepts/security/service-accounts/
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # -- Environment variables to configure application
  # </br> Ref: https://github.com/konstellation-io/kdl-server/tree/main/app/api
  env: {}
    # KAI_DEVELOPMENT_MODE: "{{ .Values.developmentMode }}"
    # KAI_RELEASE_NAME: "{{ .Release.Name }}"
    # # NATS Streaming
    # KAI_NATS_URL: "{{ include "nats.url" . }}"
    # KAI_NATS_MANAGER_PORT: 50051

  # -- Variables from secrets
  envFromSecrets: {}
    # MY_VARIABLE:
    #   name: <name-secret>
    #   key: secret_key

  # -- Variables from configMap
  envFromConfigMap: {}
    # MY_VARIABLE:
    #   name: <name-configmap>
    #   key: key

  # -- Load all variables from files
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
  envFromFiles: []
    # - secretRef:
    #     name: <name-secret>
    # - configMapRef:
    #     name: <name-configmap>

  # -- Secrets values to create credentials and reference by envFromSecrets
  # Generate Secret with following name: <release-name>-<name>
  # </br> Ref: https://kubernetes.io/docs/concepts/configuration/secret/
  secrets: []
    # - name: secret-name
    #   data:
    #     my.key: |-
    #       my-content
    #     my_var: my-value

  # -- Configure extra containers
  extraContainers: []
    # - name: project-proxy
    #   image: nginx:alpine
    #   command: ['sh', '-c', 'echo "Hello, World!"']

  # -- Configure additional containers
  # </br> Ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  initContainers: []
    # - name: my-container
    #   image: busybox
    #   command: ['sh', '-c', 'echo "Hello, World!"']

  # -- Configure args
  # </br> Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/
  args: []
    # - -c
    # - echo "Hello, World!"

  # -- Configure command
  # </br> Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/
  command: []
    # - echo
    # - "Hello, World!"

  # -- Kubernetes service to expose Pod
  # </br> Ref: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    # -- Kubernetes Service port
    port: 50051
    # -- Kubernetes Service health check path
    # healthPath: ""
    # -- Pod expose port
    # targetPort: 8080
    # -- Pod extra ports
    # extraPorts:
    # - name: metrics
    #   port: 9080
    #   targetPort: 9080

  # -- NetworkPolicy configuration
  # </br> Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  networkPolicy:
    # -- Enable or disable NetworkPolicy
    enabled: false
    # -- Policy types
    policyTypes: []
      # - Ingress
      # - Egress
    ingress: []
      # - from:
      #   - ipBlock:
      #       cidr: 172.17.0.0/16
      #       except:
      #       - 172.17.1.0/24
      #   - namespaceSelector:
      #       matchLabels:
      #         project: myproject
      #   - podSelector:
      #       matchLabels:
      #         role: frontend
      #   ports:
      #   - protocol: TCP
      #     port: 6379
    egress: []
      # - to:
      #   - ipBlock:
      #       cidr: 10.0.0.0/24
      #   ports:
      #   - protocol: TCP
      #     port: 5978

  # -- Configure lifecycle hooks
  # </br> Ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
  # </br> Ref: https://learnk8s.io/graceful-shutdown
  lifecycle: {}
    # preStop:
    #   exec:
    #     command: ["sh", "-c", "sleep 10"]

  # -- Configure Pod termination grace period
  # </br> Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination
  terminationGracePeriodSeconds: 30

  # -- Configure liveness checker
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
  livenessProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 180
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5

  # -- Custom livenessProbe
  livenessProbeCustom: {}
    # httpGet:
    #   path: /dashboard
    #   port: 4000
    # failureThreshold: 3
    # initialDelaySeconds: 200
    # periodSeconds: 30
    # successThreshold: 1
    # timeoutSeconds: 5

  # -- Configure readinessProbe checker
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
  readinessProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1

  # -- Custom readinessProbe
  readinessProbeCustom: {}
    # httpGet:
    #   path: /dashboard
    #   port: 4000
    # failureThreshold: 3
    # initialDelaySeconds: 200
    # periodSeconds: 30
    # successThreshold: 1
    # timeoutSeconds: 5

  # -- Configure startupProbe checker
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
  startupProbe:
    enabled: false
    failureThreshold: 30
    initialDelaySeconds: 180
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5

  # -- Custom startupProbe
  startupProbeCustom: {}
    # httpGet:
    #   path: /dashboard
    #   port: 4000
    # failureThreshold: 3
    # initialDelaySeconds: 200
    # periodSeconds: 30
    # successThreshold: 1
    # timeoutSeconds: 5

  # -- Check if dependencies are ready
  readyChecker:
    # -- Enable or disable ready-checker
    enabled: false
    # -- Repository of the image
    repository: busybox
    # -- Pull policy for the image
    pullPolicy: IfNotPresent
    # -- Overrides the image tag
    tag: "latest"
    # -- Number of retries before giving up
    retries: 30
    # -- Timeout for each check
    timeout: 5
    # -- List services
    services:
    # - name: service_name
    #   port: service_port
    #   address: service_address  # (Optional) This parameter is optional. If
    #   not specified, the address for the check will be automatically
    #   determined assuming the service was installed using a subchart. It is
    #   useful to specify it when the service is provisioned differently (e.g.,
    #   an S3 bucket created in the Cloud or an Elasticsearch instance outside
    #   the Kubernetes cluster). The address can be an IP address or a DNS name.
    - name: mongodb
      port: 27017
    - name: keycloak
      port: 80

  # -- Enable ServiceMonitor to get metrics
  # </br> Ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#servicemonitor
  serviceMonitor:
    # -- Enable or disable
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    metricRelabelings: []
    relabelings: []

  # -- Configure annotations on Pods
  podAnnotations: {}

  # -- Configure labels on Pods
  podLabels: {}

  # -- Defines privilege and access control settings for a Pod
  # </br> Ref: https://kubernetes.io/docs/concepts/security/pod-security-standards/
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  podSecurityContext: {}
    # fsGroup: 2000

  # -- Defines privilege and access control settings for a Container
  # </br> Ref: https://kubernetes.io/docs/concepts/security/pod-security-standards/
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # -- Resources limits and requested
  # </br> Ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # -- Pod Disruption Budget
  # </br> Ref: https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/pod-disruption-budget-v1/
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
    minAvailable:

  # -- Autoscaling with CPU or memory utilization percentage
  # </br> Ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # -- Additional volumes on the output Deployment definition
  # </br> Ref: https://kubernetes.io/docs/concepts/storage/volumes/
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
  # </br> Ref: https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/#create-a-pod-that-has-access-to-the-secret-data-through-a-volume
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # -- Additional volumeMounts on the output Deployment definition
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  # -- Node labels for pod assignment
  # </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  nodeSelector: {}

  # -- Tolerations for pod assignment
  # </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  tolerations: []

  # -- Affinity for pod assignment
  # </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  # -- Control how Pods are spread across your cluster
  # </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/#example-multiple-topologyspreadconstraints
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: zone
  #   whenUnsatisfiable: DoNotSchedule

# -- Keycloak subchart deployment
# </br> Ref: https://github.com/konstellation-io/helm-charts/blob/konstellation-base-1.0.2/charts/konstellation-base/values.yaml
keycloak:
  # -- Enable or disable Keycloak subchart
  enabled: false

  # Image registry
  # The image configuration for the base service
  image:
    repository: keycloak/keycloak
    tag: "26.0"

  # Kubernetes service to expose Pod
  # </br> Ref: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    healthPath: /realms/master
    targetPort: 8080

  # Ingress configuration to expose app
  # </br> Ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ingress:
    enabled: true
    className: ""
    annotations: {}
      # nginx.org/proxy-buffer-size: "128k"
      # nginx.org/proxy-buffers: "8 256k"
    hosts:
    - host: keycloak.kai.local
      paths:
      - path: /
        pathType: ImplementationSpecific

  # Enable creation of ServiceAccount
  # </br> Ref: https://kubernetes.io/docs/concepts/security/service-accounts/
  serviceAccount:
    create: true

  # Configure liveness checker
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
  livenessProbe:
    enabled: true

  # Configure readinessProbe checker
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
  readinessProbe:
    enabled: true
    httpGet:
      path: /realms/master

  # Configure command
  # </br> Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/
  command: []
  # - "/opt/keycloak/bin/kc.sh"
  # - "start-dev"

  # Environment variables to configure application
  # </br> Ref: https://www.keycloak.org/server/configuration
  env: {}
    # KC_DB_PASSWORD: keycloak
    # KC_DB_URL: jdbc:postgresql://postgresql:5432/keycloak
    # KC_DB_USERNAME: keycloak
    # KC_DB: postgres
    # KC_HEALTH_ENABLED: true
    # KC_HOSTNAME: keycloak.kai.local
    # KC_METRICS_ENABLED: true
    # KC_PROXY: edge
    # KEYCLOAK_ADMIN_PASSWORD: keycloak
    # KEYCLOAK_ADMIN: keycloak

# -- MinIO subchart deployment
# </br> Ref: https://github.com/minio/minio/blob/RELEASE.2025-02-07T23-21-09Z/helm/minio/values.yaml
minio:
  # -- Enable or disable MinIO subchart
  enabled: false

  # minio mode, i.e. standalone or distributed
  mode: standalone

  # Internal port number for MinIO S3 API container
  minioAPIPort: "9000"

  # Internal port number for MinIO Browser Console container
  minioConsolePort: "9001"

  # Set default rootUser, rootPassword
  # rootUser and rootPassword is generated when not set
  rootUser: ""
  rootPassword: ""

  # Enable persistence using Persistent Volume Claims
  # ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  persistence:
    enabled: false

  # Configure Ingress based on the documentation here: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ingress:
    enabled: false

  consoleIngress:
    enabled: false
    ingressClassName: ~
    annotations: {}
    path: /
    hosts:
      - minio-console.kai.local
    tls: []
      # - secretName: minio-console-tls
      #   hosts:
      #   - minio-console.kai.local

  # Configure resource requests and limits
  resources:
    requests:
      memory: 1Gi

  # List of users to be created after minio install
  users: []

  # OpenID Identity Management
  # The following section documents environment variables for enabling external identity management using an OpenID Connect (OIDC)-compatible provider.
  # See https://min.io/docs/minio/linux/operations/external-iam/configure-openid-external-identity-management.html for a tutorial on using these variables.
  oidc:
    enabled: false
    # configUrl: "https://keycloak.kai.local/realms/kdl/.well-known/openid-configuration"
    # clientId: "minio"
    # clientSecret: "minio123456"
    # claimName: "policy"
    # scopes: "openid email"
    # redirectUri: "https://minio-console.kai.local/oauth_callback"
    # displayName: "Your VASS Account"
    # rolePolicy: "readwrite"

  # Directory on the MinIO pof
  certsPath: "/certs/"

  # Additional volumes to minio container
  extraVolumes: []
    # - name: cert
    #   secret:
    #     secretName: keycloak-kdl-tls
    #     defaultMode: 420
    #     items:
    #     - key: ca.crt
    #       path: ca.crt

  # Additional volumeMounts to minio container
  extraVolumeMounts: []
    # - name: cert
    #   mountPath: /certs/CAs/ca.crt
    #   readOnly: true
    #   subPath: ca.crt

# -- MongoDB subchart deployment
# </br> Ref: https://github.com/bitnami/charts/blob/main/bitnami/mongodb/values.yaml
mongodb:
  # -- Enable or disable MongoDB subchart
  enabled: false

  # mode MongoDB server mode (`standalone` or `replicaset`)
  architecture: standalone

  # MongoDB authentication parameters
  auth:
    # MongoDB root username
    rootUser: ChangeMe
    # Password for MongoDB root user
    rootPassword: ChangeMe

  # Enable persistence using Persistent Volume Claims
  # </br> Ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  persistence:
    # Enable MongoDB data persistence using PVC. If false, use emptyDir
    enabled: false

# -- NATS subchart deployment
# </br> Ref: https://github.com/nats-io/k8s/blob/nats-1.2.10/helm/charts/nats/values.yaml
nats:
  # -- Enable or disable NATS subchart
  enabled: false

  # NATS config
  config:
    # NATS JetStream
    jetstream:
      enabled: true

      fileStore:
        enabled: true
        pvc:
          enabled: false

      memoryStore:
        enabled: true
        maxSize: 2Gi

    # merge or patch the jetstream config
    # https://docs.nats.io/running-a-nats-service/configuration#jetstream
    merge:
      debug: false
      trace: false
      logtime: true

  # service account
  serviceAccount:
    enabled: true

  monitor:
    enabled: false

  # NATS Box Deployment and associated resources
  natsBox:
    # -- Whether to enable the NATS Box
    enabled: false

# -- PostgreSQL subchart deployment
# </br> Ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
postgresql:
    # -- Enable or disable PostgreSQL subchart
  enabled: false

  # Number of PostgreSQL replicas to deploy
  replicaCount: 1

  # PostgreSQL Authentication parameters
  auth:
    # PostgreSQL application username
    # </br> Ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#environment-variables
    username: user
    # PostgreSQL application password
    # </br> Ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#environment-variables
    password: ChangeMe
    # PostgreSQL application database
    # </br> Ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#environment-variables
    database: "kai"

  # Enable persistence using Persistent Volume Claims
  primary:
    # Persistence parameters
    persistence:
      # Enable PostgreSQL data persistence using PVC
      enabled: false

# -- Redis subchart deployment
# </br> Ref: https://github.com/bitnami/charts/blob/redis/20.7.0/bitnami/redis/values.yaml
redis:
  # -- Enable or disable Redis subchart
  enabled: false

  # Redis architecture. Allowed values: `standalone` or `replication`
  architecture: standalone

  #  Redis Authentication parameters
  # </br> Ref: https://github.com/bitnami/containers/tree/main/bitnami/redis#setting-the-server-password-on-first-run
  auth:
    # Enable password authentication
    enabled: false

  # Redis master configuration parameters
  master:
    # Number of Redis master instances to deploy (experimental, requires additional configuration)
    count: 1
    # Persistence parameters
    # </br> Ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
    persistence:
      # Enable persistence on Redis master nodes using Persistent Volume Claims
      enabled: false

  # Redis replicas configuration parameters
  replica:
    # Number of Redis replicas to deploy
    replicaCount: 1
    # Persistence parameters
    # </br> Ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
    persistence:
      # Enable persistence on Redis master nodes using Persistent Volume Claims
      enabled: false

# -- Vault subchart deployment
# </br> Ref: https://github.com/bitnami/charts/blob/redis/20.7.0/bitnami/redis/values.yaml
vault:
  # -- Enable or disable Vault subchart
  enabled: false

  server:
    # Affinity Settings
    affinity: ""

    # Ingress allows ingress services to be created to allow external access
    ingress:
      enabled: false
      ingressClassName: ""
      pathType: ImplementationSpecific
      hosts:
      - host: vault.kai.local

    # This configures the Vault Statefulset to create a PVC for data
    dataStorage:
      enabled: false

  # Vault UI
  ui:
    enabled: true
