// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package giteaservice is a generated GoMock package.
package giteaservice

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/konstellation-io/kdl-server/app/api/entity"
	reflect "reflect"
)

// MockGiteaClient is a mock of GiteaClient interface
type MockGiteaClient struct {
	ctrl     *gomock.Controller
	recorder *MockGiteaClientMockRecorder
}

// MockGiteaClientMockRecorder is the mock recorder for MockGiteaClient
type MockGiteaClientMockRecorder struct {
	mock *MockGiteaClient
}

// NewMockGiteaClient creates a new mock instance
func NewMockGiteaClient(ctrl *gomock.Controller) *MockGiteaClient {
	mock := &MockGiteaClient{ctrl: ctrl}
	mock.recorder = &MockGiteaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGiteaClient) EXPECT() *MockGiteaClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method
func (m *MockGiteaClient) CreateUser(email, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", email, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockGiteaClientMockRecorder) CreateUser(email, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockGiteaClient)(nil).CreateUser), email, username, password)
}

// AddSSHKey mocks base method
func (m *MockGiteaClient) AddSSHKey(username, publicSSHKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSSHKey", username, publicSSHKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSSHKey indicates an expected call of AddSSHKey
func (mr *MockGiteaClientMockRecorder) AddSSHKey(username, publicSSHKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSSHKey", reflect.TypeOf((*MockGiteaClient)(nil).AddSSHKey), username, publicSSHKey)
}

// CreateRepo mocks base method
func (m *MockGiteaClient) CreateRepo(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepo", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRepo indicates an expected call of CreateRepo
func (mr *MockGiteaClientMockRecorder) CreateRepo(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepo", reflect.TypeOf((*MockGiteaClient)(nil).CreateRepo), name)
}

// AddTeamMember mocks base method
func (m *MockGiteaClient) AddTeamMember(username string, accessLevel entity.AccessLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamMember", username, accessLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTeamMember indicates an expected call of AddTeamMember
func (mr *MockGiteaClientMockRecorder) AddTeamMember(username, accessLevel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamMember", reflect.TypeOf((*MockGiteaClient)(nil).AddTeamMember), username, accessLevel)
}
